import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b52e14a8.js";const p="/FE/project/64.png",o="/FE/project/65.png",h=JSON.parse('{"title":"组件化开发","description":"","frontmatter":{},"headers":[],"relativePath":"project/component.md","filePath":"project/component.md","lastUpdated":1683265897000}'),e={name:"project/component.md"},r=l(`<h1 id="组件化开发" tabindex="-1">组件化开发 <a class="header-anchor" href="#组件化开发" aria-label="Permalink to &quot;组件化开发&quot;">​</a></h1><p>我们平时开发业务系统的时候，可能只关注如何把功能实现，并没有把精力关注在代码或组件在最大程度上可以被重用，这样导致每次开发不同项目的时候都会有不同程度重复性的工作。而一些持续运营的项目，或者一些业务相似的项目在开发过程中，为了提高开发效率，避免重复工作，可能会有专人来开发相应的组件库。很多的开源组件库都是为了提高公司内部的开发效率，在公司内部孵化出来的，比如我们常用的Element-UI就是饿了么内部使用的、以及iView是其公司内部创新的产物，最终都开源被更多人使用。实际在公司内部也会有满足自己业务需求的组件库。</p><p>其实还有一种组件优先的开发方式叫做CDD(Component-Driven Development)组件驱动开发。</p><ul><li>是一种自下而上构建UI的过程</li><li>从组件级别开始，到页面级别结束。也就是先从相对完善的设计中抽象出组件，先隔离开发组件，然后再开发页面。</li></ul><p>使用CDD开发的好处主要有：</p><ul><li>可以让组件在最大程度被重用</li><li>并行开发，对单个组件的开发使用CDD可以让你页面级开发无法实现的方式在不同团队间共享任务，这个任务就是开发相对隔离的组件。</li><li>可视化测试，通过一些工具可以直接浏览我们的组件，而不需要到业务系统中测试组件，可以对组件的不同状态进行测试。</li></ul><h2 id="处理组件边界情况" tabindex="-1">处理组件边界情况 <a class="header-anchor" href="#处理组件边界情况" aria-label="Permalink to &quot;处理组件边界情况&quot;">​</a></h2><p>在开发组件前先回顾vue文档中处理组件边界情况的api。</p><ul><li>$root，通过$root访问到vue的根实例，操作根实例中的成员。只有在小型的少量组件的应用中会在根实例存储共享数据，这样很方便。但是在大型应用还是推荐使用Vuex管理应用的状态。</li><li>$parent/$children，它们用来获取父组件或子组件调用其成员，绝大多数用的很少。</li><li>$refs，通过$refs可以访问子组件，在开发自定义组件中会用到。</li><li>依赖注入provide/inject，针对组件嵌套比较多的情况</li></ul><h2 id="attrs-listeners" tabindex="-1">$attrs/$listeners <a class="header-anchor" href="#attrs-listeners" aria-label="Permalink to &quot;$attrs/$listeners&quot;">​</a></h2><p>$attrs的作用是把父组件中非prop属性绑定到内部组件</p><p>$listeners的作用是把父组件中的DOM对象的原生事件绑定到内部组件</p><h2 id="组件的分类" tabindex="-1">组件的分类 <a class="header-anchor" href="#组件的分类" aria-label="Permalink to &quot;组件的分类&quot;">​</a></h2><ul><li>第三方组件：例如Element-UI、iView等</li><li>基础组件：例如文本框、按钮等</li><li>业务组件：指的是结合特定行业使用场景的组件，可以根据用户的行为输出特定的界面展示给用户。</li></ul><p>如果我们开发的应用对界面要求不高，这时我们可以直接使用第三方组件，如果对组件的样式有很高的要求，或者有一套自己的使用标准，这个时候需要开发自己的组件库。开发一套方便团队内部使用的基础组件，或者说通用组件。如果针对特定的行业，比如财务、餐饮或者人力系统，会有针对特定业务抽象出来的组件，我们可以把这些组件抽象出来方便未来去重用。开发业务组件一般可以基于现有的组件，比如第三方组件，在第三方组件的基础上进行开发。</p><h2 id="monorepo" tabindex="-1">Monorepo <a class="header-anchor" href="#monorepo" aria-label="Permalink to &quot;Monorepo&quot;">​</a></h2><p>假设我们要开发一个组件库，这个组件库有很多个组件，当我们开发完组件库后，我们还要把它发布到npm或私有仓库上，让其他人使用。在使用Element-UI的时候，我们可以完整的引用Element-UI，如果只使用到其中的部分组件，减少打包的体积，我们会选择按需引用的方式，要安装babel的插件，然后配置babel比较麻烦。我们开发的组件库为了使用方便，我们把组件作为一个单独的包发布到npm上，其他人使用的时候只需要下载它需要的组件，当然你也可以把组件打包到一起发布。这时候我们有两种开发方式：</p><ul><li>Multirepo(Multiple Repository)，每一个包对应一个项目，即每个组件对应一个仓库也就是多仓库，每个组件需要脚手架，都要下载自己的依赖，都需要单独进行发布，而且我们多个组件可能会有相同的依赖，避免不了下载重复依赖。</li><li>Monorepo(Monolithic Repository)，一个项目仓库中管理多个模块/包，即只创建一个项目，根目录下存放脚手架，所有的组件都放在根目录下统一的目录下，这个目录可以叫做packages，每一个组件在该目录中设置一个子文件夹，叫做包。所有的组件的配置都类似，因此可以放在根目录下。相同的依赖可以下载一份，打包测试都可以统一的管理。这种方式管理项目很方便，很多知名开源库都是这样管理项目的。例如vue3、react、babel等等。</li></ul><h2 id="storybook" tabindex="-1">Storybook <a class="header-anchor" href="#storybook" aria-label="Permalink to &quot;Storybook&quot;">​</a></h2><p><a href="https://storybook.js.org/docs/react/get-started/introduction" target="_blank" rel="noreferrer">Storybook</a>翻译过来是故事书，我们可以把每个组件想象成一个故事，Storybook就好像在讲一个一个的故事。Storybook是一个可视化的组件展示平台，可以使用Storybook在独立的环境中创建组件，在隔离的开发环境中，以交互式的方式展示组件。Storybook在主程序之外运行，因此用户可以独立开发组件库，而不必担心应用程序特定的依赖关系，也就是它把程序的开发和组件的开发分离，在Storybook中开发组件并预览测试。组件开发完毕可以直接在主程序中或者让其他人使用我们开发好的组件。Storybook支持非常多的框架，它可以开发下面这些框架的组件，例如：</p><ul><li>React、React Native、Vue、Angular</li><li>Ember、HTML、Svelte、Mithril、Riot</li></ul><p>另外，Storybook还支持很多插件，提供灵活的api，可以根据需要自定义Storybook，还可以构建Storybook的静态版本，并将其部署到HTTP服务器。</p><h3 id="storybook安装" tabindex="-1">Storybook安装 <a class="header-anchor" href="#storybook安装" aria-label="Permalink to &quot;Storybook安装&quot;">​</a></h3><p>自动安装方式：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@storybook/cli</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sb</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vue</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vue</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vue-loader</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vue-template-compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@storybook/cli</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sb</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vue</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vue</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vue-loader</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vue-template-compiler</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>整体目录结构如下： <img src="`+p+`" alt=""> 看一下package.json的scripts命令</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;storybook&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;start-storybook -p 6006&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;build-storybook&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;build-storybook&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;storybook&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;start-storybook -p 6006&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;build-storybook&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;build-storybook&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>storybook命令为启动storybook，build-storybook命令用来打包生成静态网站。</p><p>.storybook中main.js相当于是storybook的配置文件，这里设置了storybook的路径stories，storybook就是stories的集合，stories就是用来创建界面上呈现的内容。addons是插件，actions是用来快速注册事件的，links是用来设置链接。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//.storybook/main.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;stories&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;../stories/**/*.stories.mdx&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;../stories/**/*.stories.@(js|jsx|ts|tsx)&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;addons&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;@storybook/addon-links&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;@storybook/addon-essentials&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;@storybook/addon-interactions&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;framework&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;@storybook/vue&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//.storybook/main.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;stories&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;../stories/**/*.stories.mdx&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;../stories/**/*.stories.@(js|jsx|ts|tsx)&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;addons&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;@storybook/addon-links&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;@storybook/addon-essentials&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;@storybook/addon-interactions&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;framework&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;@storybook/vue&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>stories中有Butoon、Header组件，stories引用对应的组件并呈现到界面上。 <img src="`+o+`" alt=""></p><p>export default导出的组件，title就是界面上对应的大组，</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//stories/Button.stories.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  title: </span><span style="color:#9ECBFF;">&#39;Example/Button&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  component: MyButton,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// More on argTypes: https://storybook.js.org/docs/vue/api/argtypes</span></span>
<span class="line"><span style="color:#E1E4E8;">  argTypes: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    backgroundColor: { control: </span><span style="color:#9ECBFF;">&#39;color&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    size: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      control: { type: </span><span style="color:#9ECBFF;">&#39;select&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      options: [</span><span style="color:#9ECBFF;">&#39;small&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;medium&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;large&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//stories/Button.stories.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  title: </span><span style="color:#032F62;">&#39;Example/Button&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  component: MyButton,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// More on argTypes: https://storybook.js.org/docs/vue/api/argtypes</span></span>
<span class="line"><span style="color:#24292E;">  argTypes: {</span></span>
<span class="line"><span style="color:#24292E;">    backgroundColor: { control: </span><span style="color:#032F62;">&#39;color&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    size: {</span></span>
<span class="line"><span style="color:#24292E;">      control: { type: </span><span style="color:#032F62;">&#39;select&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      options: [</span><span style="color:#032F62;">&#39;small&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;medium&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;large&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>export const是一些函数也就是导出一个个的故事</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Secondary</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Template.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">({});</span></span>
<span class="line"><span style="color:#E1E4E8;">Secondary.args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  label: </span><span style="color:#9ECBFF;">&#39;Button&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Secondary</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Template.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">({});</span></span>
<span class="line"><span style="color:#24292E;">Secondary.args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  label: </span><span style="color:#032F62;">&#39;Button&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>我们在这个项目中可以先开发组件，等组件开发完成后，我们就可以写stories来查看组件渲染的结果。</p><h2 id="yarn-workspaces" tabindex="-1">yarn workspaces <a class="header-anchor" href="#yarn-workspaces" aria-label="Permalink to &quot;yarn workspaces&quot;">​</a></h2><p>workspaces是工作区的意思，我们先看一下Monorepo的工作结构</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|-</span><span style="color:#E1E4E8;">package.json</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_packages</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|-</span><span style="color:#E1E4E8;">button</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|-</span><span style="color:#E1E4E8;">form</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|-</span><span style="color:#E1E4E8;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_steps</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_package.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|-</span><span style="color:#24292E;">package.json</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">_packages</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|-</span><span style="color:#24292E;">button</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_package.json</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|-</span><span style="color:#24292E;">form</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_package.json</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|-</span><span style="color:#24292E;">input</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_package.json</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_steps</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>最外层的文件夹中是脚手架，因为所有的包都有相似的行为，所以这里存放所有的包的开发依赖，比如babel、storybook以及测试工具jest等，packages目录下有很多包，每个包对应着一个或多个组件，不同的包可能有不同的运行依赖，每个包的package.json记录自己的依赖，常规情况下我们需要给每个包安装各自的依赖。两个包如果有相同的依赖则会重复下载，占用硬盘的情况。开启yarn workspaces之后可以让我们在根目录中使用yarn install给所有的包统一安装依赖，如果不同的包中引用相同的第三方包，这时只会下载一次，并把相同依赖提升到根目录下node_modules中减少重复。如果不同的包引用同一个包但是版本不同，这时候会把相同的包提升到根目录下，版本不同的会单独在包中下载。</p><h3 id="开启yarn的工作区" tabindex="-1">开启yarn的工作区 <a class="header-anchor" href="#开启yarn的工作区" aria-label="Permalink to &quot;开启yarn的工作区&quot;">​</a></h3><p>在项目根目录的package.json中设置：private设置为true，这样根目录就不会发布出去，然后设置workspaces工作区的子目录，可以使用*指定packages下的任意包。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;private&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;workspaces&quot;</span><span style="color:#E1E4E8;">:[</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;packages/*&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;private&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;workspaces&quot;</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;packages/*&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="yarn-workspaces使用" tabindex="-1">yarn workspaces使用 <a class="header-anchor" href="#yarn-workspaces使用" aria-label="Permalink to &quot;yarn workspaces使用&quot;">​</a></h3><p>把工作区的开发依赖安装到根目录下的node_modules中，-D是开发依赖，-W是工作区指的是安装到工作区的根目录。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-W</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-W</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们可以给指定的包安装单独的依赖，通过yarn workspace 包名 add 第三方包名，注意包名指的是工作区下包的package.json的包名。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">workspace</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lg-button</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lodash@4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">workspace</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lg-button</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lodash@4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果我们的包中都有各自的依赖，可以使用yarn install安装所有包的依赖，不需要一个包一个包来安装，如果多个包有相同的依赖，会自动的将其提升到工作区下的node_modules中，防止重复下载。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="lerna" tabindex="-1">Lerna <a class="header-anchor" href="#lerna" aria-label="Permalink to &quot;Lerna&quot;">​</a></h2><p>当我们组件库开发完毕后，想要把所有组件提交到Github或npm上，这时我们可以使用Lerna，方便我们把项目中的组件统一发布。</p><p>Lerna是babel自己维护自己的Monorepo而开源的项目，它是用来优化使用git和npm管理多包仓库的工作流工具，用于管理具有多个包的JavaScript项目，它可以一键把代码提交到git和npm仓库。Lerna也可以管理包的依赖，它可以选择使用npm还是yarn来管理包的依赖，它需要单独配置，如果使用yarn也可以开启yarn workspaces。一般我们会把Lerna和yarn workspaces结合使用，使用Lerna发布，使用yarn workspaces管理依赖。</p><h3 id="lerna使用" tabindex="-1">Lerna使用 <a class="header-anchor" href="#lerna使用" aria-label="Permalink to &quot;Lerna使用&quot;">​</a></h3><p>全局安装</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">global</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lerna</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">global</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lerna</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>初始化</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">lerna</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">lerna</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>初始化后如果当前项目没有git管理的话，它会初始化git。在项目根目录创建lerna.json的配置文件，在package.json中添加开发依赖，初始化完毕我们就可以使用Lerna发布项目。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">lerna</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">publish</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">lerna</span><span style="color:#24292E;"> </span><span style="color:#032F62;">publish</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们需要连接到git仓库，并登录npm，发布时就可以提交到git仓库并发布到npm上。</p><h2 id="vue组件的单元测试" tabindex="-1">Vue组件的单元测试 <a class="header-anchor" href="#vue组件的单元测试" aria-label="Permalink to &quot;Vue组件的单元测试&quot;">​</a></h2><p>单元测试就是使用断言的方式对函数的输入、输出进行测试，根据输入判断输出和预测的输出是否相同。使用单元测试的目的是为了判断模块内部可能存在的错误，组件的单元测试指的是使用单元测试工具对组件的各种状态和行为进行测试，确保在组件发布之后在项目使用组件的过程中不会导致程序出现错误。</p><h3 id="组件单元测试的好处" tabindex="-1">组件单元测试的好处 <a class="header-anchor" href="#组件单元测试的好处" aria-label="Permalink to &quot;组件单元测试的好处&quot;">​</a></h3><ul><li>提供描述组件行为的文档</li><li>节省手动测试的时间</li><li>减少研发新特性时产生的bug</li><li>改进设计</li><li>促进重构</li></ul><h3 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h3><ul><li>Vue Test Utils：Vue官方提供的单元测试库</li><li>Jest</li><li>vue-jest</li><li>babel-jest</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@vue/test-utils</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vue-jest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">babel-jest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-W</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@vue/test-utils</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vue-jest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">babel-jest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-W</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="配置测试脚本" tabindex="-1">配置测试脚本 <a class="header-anchor" href="#配置测试脚本" aria-label="Permalink to &quot;配置测试脚本&quot;">​</a></h3><p>在package.json中配置单元测试的脚本</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;jest&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//package.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;jest&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Jest配置文件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//jest.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;testMatch&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;**/__tests__/**/*.[jt]s?(x)&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;moduleFileExtensions&quot;</span><span style="color:#E1E4E8;">:[</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;json&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//告诉Jest处理\`*.vue\`文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;transform&quot;</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//用\`vue-jest\`处理\`*.vue\`文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;.*</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">.(vue)$&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;vue-jest&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//用\`babel-jest\`处理js</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;.*</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">.(js)$&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;babel-jest&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//jest.config.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;testMatch&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;**/__tests__/**/*.[jt]s?(x)&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;moduleFileExtensions&quot;</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;json&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//告诉Jest处理\`*.vue\`文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;transform&quot;</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//用\`vue-jest\`处理\`*.vue\`文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;.*</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">.(vue)$&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;vue-jest&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//用\`babel-jest\`处理js</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;.*</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">.(js)$&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;babel-jest&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Babel配置文件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//babel.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  presets:[</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;@babel/preset-env&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//babel.config.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  presets:[</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;@babel/preset-env&#39;</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果提示找不到babel可以安装Babel桥接</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">babel-core@bridge</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-W</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">babel-core@bridge</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-W</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="jest常用api" tabindex="-1">Jest常用API <a class="header-anchor" href="#jest常用api" aria-label="Permalink to &quot;Jest常用API&quot;">​</a></h3><p>全局函数</p><ul><li>describe(name,fn) 创建代码块，把相关测试组合在一起</li><li>test(name,fn) 测试方法</li><li>expect(value) 断言，一般测试函数或者方法返回值</li></ul><p>匹配器</p><ul><li>toBe(value) 判断值是否相等</li><li>toEqual(obj) 判断对象是否相等</li><li>toContain(value) 判断数组或者字符串中是否包含</li></ul><p>快照</p><ul><li>toMatchSnapshot()</li></ul><h3 id="vue-test-utils常用api" tabindex="-1">Vue Test Utils常用API <a class="header-anchor" href="#vue-test-utils常用api" aria-label="Permalink to &quot;Vue Test Utils常用API&quot;">​</a></h3><p>mount()：创建一个包含被挂载和渲染的Vue组件的Wrapper。</p><p>Wrapper：</p><ul><li>vm wrapper包裹的组件实例</li><li>props() 返回Vue实例选项中的props对象</li><li>html() 组件生成的HTML标签</li><li>find() 通过选择器返回匹配到的组件中的DOM元素</li><li>trigger() 触发DOM原生事件，自定义事件wrapper.vm.$emit()</li></ul><h2 id="rollup" tabindex="-1">Rollup <a class="header-anchor" href="#rollup" aria-label="Permalink to &quot;Rollup&quot;">​</a></h2><p>在项目发布之前还需要打包处理，我们选择Rollup打包。Rollup是一个模块打包器，很多开源项目都采用Rollup打包，比如Vue、React等，Rollup支持Tree-shaking，可以静态分析代码中的import，然后排除未使用的代码，它打包的结果比Webpack要小，开发框架/组件库的时候使用Rollup更合适。</p><h3 id="安装依赖-1" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖-1" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h3><p>由于打包属于开发依赖，所以将其安装在工作区的根目录下。</p><ul><li>Rollup</li><li>rollup-plugin-terser，对代码进行压缩</li><li>rollup-plugin-vue，将单文件组件编译成JS代码</li><li>vue-template-compiler</li></ul><h3 id="配置rollup" tabindex="-1">配置rollup <a class="header-anchor" href="#配置rollup" aria-label="Permalink to &quot;配置rollup&quot;">​</a></h3><p>安装好rollup和相关插件后，配置rollup.config.js配置文件。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { terser } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rollup-plugin-terser&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rollup-plugin-vue&#39;</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    input: </span><span style="color:#9ECBFF;">&#39;index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    output:[</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        file: </span><span style="color:#9ECBFF;">&#39;dist/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        format:</span><span style="color:#9ECBFF;">&#39;es&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins:[</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        css:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        compileTemplate:</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      }),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">terser</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { terser } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;rollup-plugin-terser&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;rollup-plugin-vue&#39;</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    input: </span><span style="color:#032F62;">&#39;index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    output:[</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        file: </span><span style="color:#032F62;">&#39;dist/index.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        format:</span><span style="color:#032F62;">&#39;es&#39;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    plugins:[</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        css:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        compileTemplate:</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      }),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">terser</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="设置环境变量" tabindex="-1">设置环境变量 <a class="header-anchor" href="#设置环境变量" aria-label="Permalink to &quot;设置环境变量&quot;">​</a></h2><p>通过使用cross-env来设置环境变量</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cross-env</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-W</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cross-env</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-W</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在scripts脚本中</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">scripts</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;build:prod&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cross-env NODE_ENV=production rollup -c&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;build:dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cross-env NODE_ENV=development rollup -c&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">scripts</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;build:prod&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cross-env NODE_ENV=production rollup -c&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;build:dev&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cross-env NODE_ENV=development rollup -c&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="清理" tabindex="-1">清理 <a class="header-anchor" href="#清理" aria-label="Permalink to &quot;清理&quot;">​</a></h2><p>清理做两件事，清理所有包中的node_modules和dist。清理node_modules使用lerna的clean命令即可。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">lerna</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clean</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">lerna</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clean</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>清理dist使用rimraf，先安装rimraf，然后使用其删除指定文件夹</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rimraf</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-W</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rimraf</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-W</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;del&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;rimraf dist&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;del&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;rimraf dist&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>每个包中都有del命令，但是我们不可能进入每个包去执行这个命令，因此使用yarn workspaces来执行所有包中的命令。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">workspaces</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">del</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">workspaces</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">del</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="基于模板生成组件基本结构" tabindex="-1">基于模板生成组件基本结构 <a class="header-anchor" href="#基于模板生成组件基本结构" aria-label="Permalink to &quot;基于模板生成组件基本结构&quot;">​</a></h2><p>如果我要创建一个新的组件，由于每个组件都是相同的目录结构，所以我们可以把相同的部分提取出来作为一个模板，基于模板快速生成一个新的组件结构，这时候我们可以使用plop或者自定义模板下载到本地。</p><h2 id="发布" tabindex="-1">发布 <a class="header-anchor" href="#发布" aria-label="Permalink to &quot;发布&quot;">​</a></h2><p>发布之前先打包，然后登录npm，使用lerna publish来发布即可。</p>`,113),t=[r];function c(i,E,y,u,d,b){return a(),n("div",null,t)}const m=s(e,[["render",c]]);export{h as __pageData,m as default};
