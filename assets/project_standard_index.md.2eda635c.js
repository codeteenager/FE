import{_ as e,c as i,o as t,a as l}from"./app.b1b60815.js";const S=JSON.parse('{"title":"规范化","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么要有规范化标准","slug":"为什么要有规范化标准","link":"#为什么要有规范化标准","children":[]},{"level":2,"title":"实现规范化的方法","slug":"实现规范化的方法","link":"#实现规范化的方法","children":[]},{"level":2,"title":"常见的规范化实现方式","slug":"常见的规范化实现方式","link":"#常见的规范化实现方式","children":[]},{"level":2,"title":"ESLint介绍","slug":"eslint介绍","link":"#eslint介绍","children":[]},{"level":2,"title":"ESLint安装","slug":"eslint安装","link":"#eslint安装","children":[]}],"relativePath":"project/standard/index.md","lastUpdated":1670674756000}'),a={name:"project/standard/index.md"},n=l('<h1 id="规范化" tabindex="-1">规范化 <a class="header-anchor" href="#规范化" aria-hidden="true">#</a></h1><p>规范化是我们践行前端工程化中重要的一部分。</p><h2 id="为什么要有规范化标准" tabindex="-1">为什么要有规范化标准 <a class="header-anchor" href="#为什么要有规范化标准" aria-hidden="true">#</a></h2><p>俗话说，无规矩不成方圆，尤其是在开发行业中，更是要有严谨的工作态度，我们都知道大多数软件开发都不是一个人的工作，都是需要多人协同的，而不同的开发者有不同的编码习惯和喜好，这些个人的喜好并没有什么不好的地方，只是说同一个项目中，每一个人的喜好都不相同，那么就会导致项目的维护成本大大增加，所以说我们需要为每个项目或者团队需要明确统一的标准，让项目或团队中的成员按照统一的标准去完成工作，从而避免各种不统一而带来的麻烦。那么知道了为什么规范化标准之后，那么看一下在开发过程中，哪些地方用到规范化标准的。</p><ul><li>代码、文档、甚至是提交的日志</li><li>开发过程中人为编写的内容</li><li>其中代码的标准化规范最为重要，因为代码的规范很大程度上决定着代码的质量以及可维护性，为了便于后期维护以及其他成员的阅读，一般情况下我们都对代码的风格进行统一的要求。</li></ul><h2 id="实现规范化的方法" tabindex="-1">实现规范化的方法 <a class="header-anchor" href="#实现规范化的方法" aria-hidden="true">#</a></h2><p>我们在落实规范化的标准的时候也很简单，只需要提前约定好一个执行的标准，然后按照标准各自执行各自的开发工作。最后在Code Review环节按照之前约定的标准去检查各自相应的代码，但是按照人为约定的方式执行规范化会有很多的问题，一来人为约束不可靠，二来开发者也很难记住规则。所以我们就需要相对应的工具做保障，相比人为的检查，工具的检查更为可靠，同时配合自动化的工具进行自动化检查，这样就能得到质量化的保证。将工具检查代码规范的过程称为lint，例如前端常见的eslint、stylelint等。</p><h2 id="常见的规范化实现方式" tabindex="-1">常见的规范化实现方式 <a class="header-anchor" href="#常见的规范化实现方式" aria-hidden="true">#</a></h2><ul><li>ESLint工具使用</li><li>定制ESLint校验规则</li><li>ESLint对TypeScript的支持</li><li>ESLint结合自动化工具或者Webpack进行项目自动化校验</li><li>基于ESLint的衍生工具</li><li>Stylelint工具的使用</li></ul><h2 id="eslint介绍" tabindex="-1">ESLint介绍 <a class="header-anchor" href="#eslint介绍" aria-hidden="true">#</a></h2><p>EsLint是目前最为主流的JavaScript Lint工具，专门用于检测JS代码质量，通过ESLint很容易统一开发者的编码风格，例如：缩进、换行、分号以及空格之类的使用。不仅如此，EsLint还能帮助我们找到代码中不合理的地方，例如我们定义了一个从未使用的变量，或者在变量使用之后才去做声明等等，而这些不合理的操作就是代码中潜在的问题，通过EsLint能有效避免这些问题，从而提高代码的质量。</p><h2 id="eslint安装" tabindex="-1">ESLint安装 <a class="header-anchor" href="#eslint安装" aria-hidden="true">#</a></h2><ul><li>首先我们需要创建一个项目</li><li>在项目中安装ESLint模块为开发依赖</li><li>然后通过CLI命令验证安装结果</li></ul>',13),r=[n];function d(s,h,c,o,_,p){return t(),i("div",null,r)}const E=e(a,[["render",d]]);export{S as __pageData,E as default};
