import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.d64f6e3c.js";const d=JSON.parse('{"title":"模板编译和组件化","description":"","frontmatter":{},"headers":[],"relativePath":"framework/vue-compiler-component.md","filePath":"framework/vue-compiler-component.md","lastUpdated":1683265897000}'),l={name:"framework/vue-compiler-component.md"},o=p(`<h1 id="模板编译和组件化" tabindex="-1">模板编译和组件化 <a class="header-anchor" href="#模板编译和组件化" aria-label="Permalink to &quot;模板编译和组件化&quot;">​</a></h1><h2 id="模板编译" tabindex="-1">模板编译 <a class="header-anchor" href="#模板编译" aria-label="Permalink to &quot;模板编译&quot;">​</a></h2><p>模板编译的主要目的是将模板 (template) 转换为渲染函数 (render)</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;handler&quot;</span><span style="color:#E1E4E8;">&gt;title&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;some content&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;handler&quot;</span><span style="color:#24292E;">&gt;title&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;some content&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>渲染函数 render</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;"> (h) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;h1&#39;</span><span style="color:#E1E4E8;">, { on: { click: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.handler} }, </span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;p&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;some content&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ])</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">render</span><span style="color:#24292E;"> (h) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">, [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;h1&#39;</span><span style="color:#24292E;">, { on: { click: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.handler} }, </span><span style="color:#032F62;">&#39;title&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;p&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;some content&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    ])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>模板编译的作用</p><ul><li>Vue 2.x 使用 VNode 描述视图以及各种交互，用户自己编写 VNode 比较复杂</li><li>用户只需要编写类似 HTML 的代码 - Vue 模板，通过编译器将模板转换为返回 VNode 的render 函数</li><li>.vue 文件会被 webpack 在构建的过程中转换成 render 函数</li></ul><h3 id="体验模板编译的结果" tabindex="-1">体验模板编译的结果 <a class="header-anchor" href="#体验模板编译的结果" aria-label="Permalink to &quot;体验模板编译的结果&quot;">​</a></h3><p>带编译器版本的 Vue.js 中，使用 template 或 el 的方式设置模板</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;Vue&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;模板编译过程&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;{{ msg }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">comp</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@myclick</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;handler&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#FDAEB7;font-style:italic;">comp</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;../../dist/vue.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Vue.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;comp&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        template: </span><span style="color:#9ECBFF;">&#39;&lt;div&gt;I am a comp&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        el: </span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        data: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            msg: </span><span style="color:#9ECBFF;">&#39;Hello compiler&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        methods: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(vm.$options.render)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;Vue&lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;模板编译过程&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;{{ msg }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">comp</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@myclick</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;handler&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#B31D28;font-style:italic;">comp</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;../../dist/vue.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;comp&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">        template: </span><span style="color:#032F62;">&#39;&lt;div&gt;I am a comp&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        el: </span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        data: {</span></span>
<span class="line"><span style="color:#24292E;">            msg: </span><span style="color:#032F62;">&#39;Hello compiler&#39;</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        methods: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(vm.$options.render)</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>编译后 render 输出的结果</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">anonymous</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_c</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            { attrs: { id: </span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;"> } },</span></span>
<span class="line"><span style="color:#E1E4E8;">            [</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">_m</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">_v</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">_c</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;p&quot;</span><span style="color:#E1E4E8;">, [</span><span style="color:#B392F0;">_v</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_s</span><span style="color:#E1E4E8;">(msg))]),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">_v</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">_c</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;comp&quot;</span><span style="color:#E1E4E8;">, { on: { myclick: handler } }),</span></span>
<span class="line"><span style="color:#E1E4E8;">            ],</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">anonymous</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_c</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            { attrs: { id: </span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;"> } },</span></span>
<span class="line"><span style="color:#24292E;">            [</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">_m</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">_v</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">_c</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">, [</span><span style="color:#6F42C1;">_v</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_s</span><span style="color:#24292E;">(msg))]),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">_v</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">_c</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;comp&quot;</span><span style="color:#24292E;">, { on: { myclick: handler } }),</span></span>
<span class="line"><span style="color:#24292E;">            ],</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>_c 是 createElement() 方法，定义的位置 instance/render.js 中</li><li>相关的渲染函数(_开头的方法定义)，在 instance/render-helps/index.js 中</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// instance/render-helps/index.js</span></span>
<span class="line"><span style="color:#E1E4E8;">target._v </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> createTextVNode</span></span>
<span class="line"><span style="color:#E1E4E8;">target._m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> renderStatic</span></span>
<span class="line"><span style="color:#6A737D;">// core/vdom/vnode.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTextVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(val))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 在 instance/render-helps/render-static.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renderStatic</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">index</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">isInFor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cached</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._staticTrees </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._staticTrees </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> tree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cached[index]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// if has already-rendered static tree and not inside v-for,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// we can reuse the same tree.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tree </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isInFor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tree</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// otherwise, render a fresh tree.</span></span>
<span class="line"><span style="color:#E1E4E8;">    tree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cached[index] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$options.staticRenderFns[index].</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._renderProxy,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// for render fns generated for functional component templates</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">markStatic</span><span style="color:#E1E4E8;">(tree, </span><span style="color:#9ECBFF;">\`__static__\${</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tree</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// instance/render-helps/index.js</span></span>
<span class="line"><span style="color:#24292E;">target._v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> createTextVNode</span></span>
<span class="line"><span style="color:#24292E;">target._m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> renderStatic</span></span>
<span class="line"><span style="color:#6A737D;">// core/vdom/vnode.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTextVNode</span><span style="color:#24292E;">(</span><span style="color:#E36209;">val</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(val))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 在 instance/render-helps/render-static.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renderStatic</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">index</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">isInFor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cached</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._staticTrees </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._staticTrees </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cached[index]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// if has already-rendered static tree and not inside v-for,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// we can reuse the same tree.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tree </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isInFor) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tree</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// otherwise, render a fresh tree.</span></span>
<span class="line"><span style="color:#24292E;">    tree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cached[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$options.staticRenderFns[index].</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._renderProxy,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// for render fns generated for functional component templates</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">markStatic</span><span style="color:#24292E;">(tree, </span><span style="color:#032F62;">\`__static__\${</span><span style="color:#24292E;">index</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tree</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>把 template 转换成 render 的入口 src\\platforms\\web\\entry-runtime-with-compiler.js</p><h3 id="vue-template-explorer" tabindex="-1">Vue Template Explorer <a class="header-anchor" href="#vue-template-explorer" aria-label="Permalink to &quot;Vue Template Explorer&quot;">​</a></h3><p><a href="https://template-explorer.vuejs.org/" target="_blank" rel="noreferrer">vue-template-explorer</a>：Vue 2.6 把模板编译成 render 函数的工具</p><p><a href="https://vue-next-template-explorer.netlify.app/" target="_blank" rel="noreferrer">vue-next-template-explorer</a>：Vue 3.0 beta 把模板编译成 render 函数的工具</p><h2 id="模板编译过程" tabindex="-1">模板编译过程 <a class="header-anchor" href="#模板编译过程" aria-label="Permalink to &quot;模板编译过程&quot;">​</a></h2><p>解析、优化、生成</p><h3 id="编译的入口" tabindex="-1">编译的入口 <a class="header-anchor" href="#编译的入口" aria-label="Permalink to &quot;编译的入口&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src\\platforms\\web\\entry-runtime-with-compiler.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$mount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    ……</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 把 template 转换成 render 函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">render</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">staticRenderFns</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compileToFunctions</span><span style="color:#E1E4E8;">(template, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        outputSourceRange: p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        shouldDecodeNewlines,</span></span>
<span class="line"><span style="color:#E1E4E8;">        shouldDecodeNewlinesForHref,</span></span>
<span class="line"><span style="color:#E1E4E8;">        delimiters: options.delimiters,</span></span>
<span class="line"><span style="color:#E1E4E8;">        comments: options.comments</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    options.render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> render</span></span>
<span class="line"><span style="color:#E1E4E8;">    options.staticRenderFns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> staticRenderFns</span></span>
<span class="line"><span style="color:#E1E4E8;">    ……</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src\\platforms\\web\\entry-runtime-with-compiler.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    ……</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 把 template 转换成 render 函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">render</span><span style="color:#24292E;">, </span><span style="color:#E36209;">staticRenderFns</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compileToFunctions</span><span style="color:#24292E;">(template, {</span></span>
<span class="line"><span style="color:#24292E;">        outputSourceRange: p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        shouldDecodeNewlines,</span></span>
<span class="line"><span style="color:#24292E;">        shouldDecodeNewlinesForHref,</span></span>
<span class="line"><span style="color:#24292E;">        delimiters: options.delimiters,</span></span>
<span class="line"><span style="color:#24292E;">        comments: options.comments</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    options.render </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> render</span></span>
<span class="line"><span style="color:#24292E;">    options.staticRenderFns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> staticRenderFns</span></span>
<span class="line"><span style="color:#24292E;">    ……</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>调试 compileToFunctions() 执行过程，生成渲染函数的过程</p><ul><li>compileToFunctions: src\\compiler\\to-function.js</li><li>complie(template, options)：src\\compiler\\create-compiler.js</li><li>baseCompile(template.trim(), finalOptions)：src\\compiler\\index.js</li></ul><h3 id="解析-parse" tabindex="-1">解析 - parse <a class="header-anchor" href="#解析-parse" aria-label="Permalink to &quot;解析 - parse&quot;">​</a></h3><p>解析器将模板解析为抽象语法树 AST，只有将模板解析成 AST 后，才能基于它做优化或者生成代码字符串。</p><blockquote><p>抽象语法树简称AST(Abstract Syntax Tree)，使用对象的形式描述树形的代码结构，此处的抽象语法树是用来描述树形结构的HTML字符串</p></blockquote><p>为什么要使用抽象语法树？模板字符串转换成AST后，可以通过AST对模块做优化处理，标记模板中的静态内容，在patch的时候直接跳过静态内容，在patch的过程中静态内容不需要对比和重新渲染。</p><p>src\\compiler\\index.js</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ast</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(template.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">(), options)</span></span>
<span class="line"><span style="color:#6A737D;">//src\\compiler\\parser\\index.js</span></span>
<span class="line"><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ast</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(template.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">(), options)</span></span>
<span class="line"><span style="color:#6A737D;">//src\\compiler\\parser\\index.js</span></span>
<span class="line"><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>查看得到的 AST tree</p><p><a href="https://astexplorer.net/#/gist/30f2bd28c9bbe0d37c2408e87cabdfcc/1cd0d49beed22d3fc8e2ade0177bb22bbe4b907c" target="_blank" rel="noreferrer">astexplorer</a></p><p>结构化指令的处理</p><ul><li>v-if 最终生成单元表达式</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src\\compiler\\parser\\index.js</span></span>
<span class="line"><span style="color:#6A737D;">// structural directives</span></span>
<span class="line"><span style="color:#6A737D;">// 结构化的指令</span></span>
<span class="line"><span style="color:#6A737D;">// v-for</span></span>
<span class="line"><span style="color:#B392F0;">processFor</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#B392F0;">processIf</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#B392F0;">processOnce</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#6A737D;">// src\\compiler\\codegen\\index.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genIf</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">el</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">state</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CodegenState</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">altGen</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">altEmpty</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    el.ifProcessed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// avoid recursion</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genIfConditions</span><span style="color:#E1E4E8;">(el.ifConditions.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(), state, altGen, altEmpty)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 最终调用 genIfConditions 生成三元表达式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src\\compiler\\parser\\index.js</span></span>
<span class="line"><span style="color:#6A737D;">// structural directives</span></span>
<span class="line"><span style="color:#6A737D;">// 结构化的指令</span></span>
<span class="line"><span style="color:#6A737D;">// v-for</span></span>
<span class="line"><span style="color:#6F42C1;">processFor</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#6F42C1;">processIf</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#6F42C1;">processOnce</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#6A737D;">// src\\compiler\\codegen\\index.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genIf</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">el</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">state</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CodegenState</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">altGen</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">altEmpty</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    el.ifProcessed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// avoid recursion</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genIfConditions</span><span style="color:#24292E;">(el.ifConditions.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(), state, altGen, altEmpty)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 最终调用 genIfConditions 生成三元表达式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>v-if 最终编译的结果</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ƒ </span><span style="color:#B392F0;">anonymous</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_c</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { attrs: { </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;"> } }, [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">_m</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">_v</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            (msg) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_c</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;p&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#B392F0;">_v</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_s</span><span style="color:#E1E4E8;">(msg))]) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_e</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">_v</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">_c</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;comp&#39;</span><span style="color:#E1E4E8;">, { on: { </span><span style="color:#9ECBFF;">&quot;myclick&quot;</span><span style="color:#E1E4E8;">: onMyClick } })</span></span>
<span class="line"><span style="color:#E1E4E8;">        ], </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ƒ </span><span style="color:#6F42C1;">anonymous</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_c</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">, { attrs: { </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;"> } }, [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">_m</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">_v</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            (msg) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_c</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;p&#39;</span><span style="color:#24292E;">, [</span><span style="color:#6F42C1;">_v</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_s</span><span style="color:#24292E;">(msg))]) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_e</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">_v</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">_c</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;comp&#39;</span><span style="color:#24292E;">, { on: { </span><span style="color:#032F62;">&quot;myclick&quot;</span><span style="color:#24292E;">: onMyClick } })</span></span>
<span class="line"><span style="color:#24292E;">        ], </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>v-if/v-for 结构化指令只能在编译阶段处理，如果我们要在 render 函数处理条件或循环只能使用js 中的 if 和 for</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Vue.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;comp&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    data: () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        return {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">msg</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;my comp&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">h</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.msg) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.msg)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;comp&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    data: () {</span></span>
<span class="line"><span style="color:#24292E;">        return {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">msg</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;my comp&#39;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#E36209;">h</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.msg) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.msg)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="优化-optimize" tabindex="-1">优化 - optimize <a class="header-anchor" href="#优化-optimize" aria-label="Permalink to &quot;优化 - optimize&quot;">​</a></h3><ul><li>优化抽象语法树，检测子节点中是否是纯静态节点</li><li>一旦检测到纯静态节点，例如：hello整体是静态节点，永远不会更改的节点 <ul><li>提升为常量，重新渲染的时候不在重新创建节点</li><li>在 patch 的时候直接跳过静态子树</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src\\compiler\\index.js</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.optimize </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">optimize</span><span style="color:#E1E4E8;">(ast, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// src\\compiler\\optimizer.js</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* Goal of the optimizer: walk the generated template AST tree</span></span>
<span class="line"><span style="color:#6A737D;">* and detect sub-trees that are purely static, i.e. parts of</span></span>
<span class="line"><span style="color:#6A737D;">* the DOM that never needs to change.</span></span>
<span class="line"><span style="color:#6A737D;">*</span></span>
<span class="line"><span style="color:#6A737D;">* Once we detect these sub-trees, we can:</span></span>
<span class="line"><span style="color:#6A737D;">*</span></span>
<span class="line"><span style="color:#6A737D;">* 1. Hoist them into constants, so that we no longer need to</span></span>
<span class="line"><span style="color:#6A737D;">* create fresh nodes for them on each re-render;</span></span>
<span class="line"><span style="color:#6A737D;">* 2. Completely skip them in the patching process.</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">optimize</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">ASTElement</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CompilerOptions</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root) </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    isStaticKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genStaticKeysCached</span><span style="color:#E1E4E8;">(options.staticKeys </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    isPlatformReservedTag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.isReservedTag </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> no</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// first pass: mark all non-static nodes.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 标记非静态节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">markStatic</span><span style="color:#E1E4E8;">(root)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// second pass: mark static roots.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 标记静态根节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">markStaticRoots</span><span style="color:#E1E4E8;">(root, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src\\compiler\\index.js</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.optimize </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">optimize</span><span style="color:#24292E;">(ast, options)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// src\\compiler\\optimizer.js</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* Goal of the optimizer: walk the generated template AST tree</span></span>
<span class="line"><span style="color:#6A737D;">* and detect sub-trees that are purely static, i.e. parts of</span></span>
<span class="line"><span style="color:#6A737D;">* the DOM that never needs to change.</span></span>
<span class="line"><span style="color:#6A737D;">*</span></span>
<span class="line"><span style="color:#6A737D;">* Once we detect these sub-trees, we can:</span></span>
<span class="line"><span style="color:#6A737D;">*</span></span>
<span class="line"><span style="color:#6A737D;">* 1. Hoist them into constants, so that we no longer need to</span></span>
<span class="line"><span style="color:#6A737D;">* create fresh nodes for them on each re-render;</span></span>
<span class="line"><span style="color:#6A737D;">* 2. Completely skip them in the patching process.</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">optimize</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#6F42C1;">ASTElement</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CompilerOptions</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    isStaticKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genStaticKeysCached</span><span style="color:#24292E;">(options.staticKeys </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    isPlatformReservedTag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.isReservedTag </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> no</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// first pass: mark all non-static nodes.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 标记非静态节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">markStatic</span><span style="color:#24292E;">(root)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// second pass: mark static roots.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 标记静态根节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">markStaticRoots</span><span style="color:#24292E;">(root, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="生成-generate" tabindex="-1">生成 - generate <a class="header-anchor" href="#生成-generate" aria-label="Permalink to &quot;生成 - generate&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src\\compiler\\index.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(ast, options)</span></span>
<span class="line"><span style="color:#6A737D;">// src\\compiler\\codegen\\index.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">ast</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ASTElement</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CompilerOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CodegenResult</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CodegenState</span><span style="color:#E1E4E8;">(options)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ast </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genElement</span><span style="color:#E1E4E8;">(ast, state) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;_c(&quot;div&quot;)&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        render: </span><span style="color:#9ECBFF;">\`with(this){return \${</span><span style="color:#E1E4E8;">code</span><span style="color:#9ECBFF;">}}\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        staticRenderFns: state.staticRenderFns</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 把字符串转换成函数</span></span>
<span class="line"><span style="color:#6A737D;">// src\\compiler\\to-function.js</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createFunction</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">errors</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(code)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        errors.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({ err, code })</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> noop</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src\\compiler\\index.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(ast, options)</span></span>
<span class="line"><span style="color:#6A737D;">// src\\compiler\\codegen\\index.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">ast</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ASTElement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">options</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CompilerOptions</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CodegenResult</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CodegenState</span><span style="color:#24292E;">(options)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ast </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">genElement</span><span style="color:#24292E;">(ast, state) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;_c(&quot;div&quot;)&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        render: </span><span style="color:#032F62;">\`with(this){return \${</span><span style="color:#24292E;">code</span><span style="color:#032F62;">}}\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        staticRenderFns: state.staticRenderFns</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 把字符串转换成函数</span></span>
<span class="line"><span style="color:#6A737D;">// src\\compiler\\to-function.js</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createFunction</span><span style="color:#24292E;">(</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">errors</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">(code)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">        errors.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ err, code })</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> noop</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="组件化机制" tabindex="-1">组件化机制 <a class="header-anchor" href="#组件化机制" aria-label="Permalink to &quot;组件化机制&quot;">​</a></h2><ul><li>组件化可以让我们方便的把页面拆分成多个可重用的组件</li><li>组件是独立的，系统内可重用，组件之间可以嵌套</li><li>有了组件可以像搭积木一样开发网页</li><li>下面我们将从源码的角度来分析 Vue 组件内部如何工作 <ul><li>组件实例的创建过程是从上而下</li><li>组件实例的挂载过程是从下而上</li></ul></li></ul><h3 id="组件声明" tabindex="-1">组件声明 <a class="header-anchor" href="#组件声明" aria-label="Permalink to &quot;组件声明&quot;">​</a></h3><p>复习全局组件的定义方式</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Vue.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;comp&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    template: </span><span style="color:#9ECBFF;">&#39;&lt;h1&gt;hello&lt;/h1&gt;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;comp&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    template: </span><span style="color:#032F62;">&#39;&lt;h1&gt;hello&lt;/h1&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Vue.component() 入口：创建组件的构造函数，挂载到 Vue 实例的 vm.options.component.componentName = Ctor</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src\\core\\global-api\\index.js</span></span>
<span class="line"><span style="color:#6A737D;">// 注册 Vue.directive()、 Vue.component()、Vue.filter()</span></span>
<span class="line"><span style="color:#B392F0;">initAssetRegisters</span><span style="color:#E1E4E8;">(Vue)</span></span>
<span class="line"><span style="color:#6A737D;">// src\\core\\global-api\\assets.js</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;component&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPlainObject</span><span style="color:#E1E4E8;">(definition)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    definition.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> definition.name </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> id</span></span>
<span class="line"><span style="color:#E1E4E8;">    definition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options._base.</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(definition)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">……</span></span>
<span class="line"><span style="color:#6A737D;">// 全局注册，存储资源并赋值</span></span>
<span class="line"><span style="color:#6A737D;">// this.options[&#39;components&#39;][&#39;comp&#39;] = Ctor</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options[type </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">][id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> definition</span></span>
<span class="line"><span style="color:#6A737D;">// src\\core\\global-api\\index.js</span></span>
<span class="line"><span style="color:#6A737D;">// this is used to identify the &quot;base&quot; constructor to extend all plainobject</span></span>
<span class="line"><span style="color:#6A737D;">// components with in Weex&#39;s multi-instance scenarios.</span></span>
<span class="line"><span style="color:#E1E4E8;">Vue.options._base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Vue</span></span>
<span class="line"><span style="color:#6A737D;">// src\\core\\global-api\\extend.js</span></span>
<span class="line"><span style="color:#E1E4E8;">Vue.</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src\\core\\global-api\\index.js</span></span>
<span class="line"><span style="color:#6A737D;">// 注册 Vue.directive()、 Vue.component()、Vue.filter()</span></span>
<span class="line"><span style="color:#6F42C1;">initAssetRegisters</span><span style="color:#24292E;">(Vue)</span></span>
<span class="line"><span style="color:#6A737D;">// src\\core\\global-api\\assets.js</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;component&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPlainObject</span><span style="color:#24292E;">(definition)) {</span></span>
<span class="line"><span style="color:#24292E;">    definition.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> definition.name </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> id</span></span>
<span class="line"><span style="color:#24292E;">    definition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.options._base.</span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(definition)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">……</span></span>
<span class="line"><span style="color:#6A737D;">// 全局注册，存储资源并赋值</span></span>
<span class="line"><span style="color:#6A737D;">// this.options[&#39;components&#39;][&#39;comp&#39;] = Ctor</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.options[type </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;s&#39;</span><span style="color:#24292E;">][id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> definition</span></span>
<span class="line"><span style="color:#6A737D;">// src\\core\\global-api\\index.js</span></span>
<span class="line"><span style="color:#6A737D;">// this is used to identify the &quot;base&quot; constructor to extend all plainobject</span></span>
<span class="line"><span style="color:#6A737D;">// components with in Weex&#39;s multi-instance scenarios.</span></span>
<span class="line"><span style="color:#24292E;">Vue.options._base </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Vue</span></span>
<span class="line"><span style="color:#6A737D;">// src\\core\\global-api\\extend.js</span></span>
<span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>组件构造函数的创建</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VueComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_init</span><span style="color:#E1E4E8;">(options)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">Sub</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Super</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">Sub</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Sub</span></span>
<span class="line"><span style="color:#E1E4E8;">Sub.cid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cid</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">Sub.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeOptions</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    Super.options,</span></span>
<span class="line"><span style="color:#E1E4E8;">    extendOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Sub[</span><span style="color:#9ECBFF;">&#39;super&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Super</span></span>
<span class="line"><span style="color:#6A737D;">// For props and computed properties, we define the proxy getters on</span></span>
<span class="line"><span style="color:#6A737D;">// the Vue instances at extension time, on the extended prototype. This</span></span>
<span class="line"><span style="color:#6A737D;">// avoids Object.defineProperty calls for each instance created.</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Sub.options.props) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initProps</span><span style="color:#E1E4E8;">(Sub)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Sub.options.computed) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initComputed</span><span style="color:#E1E4E8;">(Sub)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// allow further extension/mixin/plugin usage</span></span>
<span class="line"><span style="color:#E1E4E8;">Sub.extend </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Super.extend</span></span>
<span class="line"><span style="color:#E1E4E8;">Sub.mixin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Super.mixin</span></span>
<span class="line"><span style="color:#E1E4E8;">Sub.use </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Super.use</span></span>
<span class="line"><span style="color:#6A737D;">// create asset registers, so extended classes</span></span>
<span class="line"><span style="color:#6A737D;">// can have their private assets too.</span></span>
<span class="line"><span style="color:#79B8FF;">ASSET_TYPES</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Sub[type] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Super[type]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">// enable recursive self-lookup</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Sub.options.components[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Sub</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VueComponent</span><span style="color:#24292E;">(</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_init</span><span style="color:#24292E;">(options)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">Sub</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Super</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">Sub</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Sub</span></span>
<span class="line"><span style="color:#24292E;">Sub.cid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cid</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">Sub.options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeOptions</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    Super.options,</span></span>
<span class="line"><span style="color:#24292E;">    extendOptions</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Sub[</span><span style="color:#032F62;">&#39;super&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Super</span></span>
<span class="line"><span style="color:#6A737D;">// For props and computed properties, we define the proxy getters on</span></span>
<span class="line"><span style="color:#6A737D;">// the Vue instances at extension time, on the extended prototype. This</span></span>
<span class="line"><span style="color:#6A737D;">// avoids Object.defineProperty calls for each instance created.</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Sub.options.props) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initProps</span><span style="color:#24292E;">(Sub)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Sub.options.computed) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initComputed</span><span style="color:#24292E;">(Sub)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// allow further extension/mixin/plugin usage</span></span>
<span class="line"><span style="color:#24292E;">Sub.extend </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Super.extend</span></span>
<span class="line"><span style="color:#24292E;">Sub.mixin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Super.mixin</span></span>
<span class="line"><span style="color:#24292E;">Sub.use </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Super.use</span></span>
<span class="line"><span style="color:#6A737D;">// create asset registers, so extended classes</span></span>
<span class="line"><span style="color:#6A737D;">// can have their private assets too.</span></span>
<span class="line"><span style="color:#005CC5;">ASSET_TYPES</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">type</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    Sub[type] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Super[type]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">// enable recursive self-lookup</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (name) {</span></span>
<span class="line"><span style="color:#24292E;">    Sub.options.components[name] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Sub</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>调试 Vue.component() 调用的过程</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;../../dist/vue.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Comp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Vue.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;comp&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        template: </span><span style="color:#9ECBFF;">&#39;&lt;h2&gt;I am a comp&lt;/h2&gt;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        el: </span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">h</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(Comp)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;../../dist/vue.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Comp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;comp&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">        template: </span><span style="color:#032F62;">&#39;&lt;h2&gt;I am a comp&lt;/h2&gt;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        el: </span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">h</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(Comp)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="组件创建和挂载" tabindex="-1">组件创建和挂载 <a class="header-anchor" href="#组件创建和挂载" aria-label="Permalink to &quot;组件创建和挂载&quot;">​</a></h3><h4 id="组件-vnode-的创建过程" tabindex="-1">组件 VNode 的创建过程 <a class="header-anchor" href="#组件-vnode-的创建过程" aria-label="Permalink to &quot;组件 VNode 的创建过程&quot;">​</a></h4><ul><li>创建根组件，首次 _render() 时，会得到整棵树的 VNode 结构</li><li>整体流程：new Vue() --&gt; $mount() --&gt; vm._render() --&gt; createElement() --&gt; createComponent()</li><li>创建组件的 VNode，初始化组件的 hook 钩子函数</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1. _createElement() 中调用 createComponent()</span></span>
<span class="line"><span style="color:#6A737D;">// src\\core\\vdom\\create-element.js</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">data.pre) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(Ctor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveAsset</span><span style="color:#E1E4E8;">(context.$options, </span><span style="color:#9ECBFF;">&#39;components&#39;</span><span style="color:#E1E4E8;">, tag))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查找自定义组件构造函数的声明</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据 Ctor 创建组件的 VNode</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// component</span></span>
<span class="line"><span style="color:#E1E4E8;">    vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createComponent</span><span style="color:#E1E4E8;">(Ctor, data, context, children, tag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 2. createComponent() 中调用创建自定义组件对应的 VNode</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// src\\core\\vdom\\create-component.js</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createComponent</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">Ctor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">VNodeData</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">context</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">tag</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isUndef</span><span style="color:#E1E4E8;">(Ctor)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ……</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// install component management hooks onto the placeholder node</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 安装组件的钩子函数 init/prepatch/insert/destroy</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 初始化了组件的 data.hooks 中的钩子函数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">installComponentHooks</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// return a placeholder vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Ctor.options.name </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> tag</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建自定义组件的 VNode，设置自定义组件的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 记录this.componentOptions = componentOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">vnode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">\`vue-component-\${</span><span style="color:#E1E4E8;">Ctor</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">cid</span><span style="color:#9ECBFF;">}\${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`-\${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}\`</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;&#39;}\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            data, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, context,</span></span>
<span class="line"><span style="color:#E1E4E8;">            { Ctor, propsData, listeners, tag, children },</span></span>
<span class="line"><span style="color:#E1E4E8;">            asyncFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 3. installComponentHooks() 初始化组件的 data.hook</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">installComponentHooks</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNodeData</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hooks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.hook </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (data.hook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {})</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 用户可以传递自定义钩子函数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 把用户传入的自定义钩子函数和 componentVNodeHooks 中预定义的钩子函数合并</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> hooksToMerge.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hooksToMerge[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">existing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hooks[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">toMerge</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> componentVNodeHooks[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (existing </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> toMerge </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(existing </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> existing._merged)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                hooks[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> existing </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeHook</span><span style="color:#E1E4E8;">(toMerge, existing) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> toMerge</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 4. 钩子函数定义的位置（init()钩子中创建组件的实例）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// inline hooks to be invoked on component VNodes during patch</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">componentVNodeHooks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vnode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNodeWithData</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">hydrating</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">                vnode.componentInstance </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">vnode.componentInstance._isDestroyed </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                vnode.data.keepAlive</span></span>
<span class="line"><span style="color:#E1E4E8;">            ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// kept-alive components, treat as a patch</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mountedNode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode </span><span style="color:#6A737D;">// work around flow</span></span>
<span class="line"><span style="color:#E1E4E8;">                componentVNodeHooks.</span><span style="color:#B392F0;">prepatch</span><span style="color:#E1E4E8;">(mountedNode, mountedNode)</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 创建组件实例挂载到 vnode.componentInstance</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.componentInstance </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">createComponentInstanceForVnode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        vnode,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        activeInstance</span></span>
<span class="line"><span style="color:#E1E4E8;">                    )</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 调用组件对象的 $mount()，把组件挂载到页面</span></span>
<span class="line"><span style="color:#E1E4E8;">                child.</span><span style="color:#B392F0;">$mount</span><span style="color:#E1E4E8;">(hydrating </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> vnode.elm </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, hydrating)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">prepatch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">oldVnode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MountedComponentVNode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">vnode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MountedComponentVNode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">……</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vnode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MountedComponentVNode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">……</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vnode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MountedComponentVNode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">……</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//5 .创建组件实例的位置，由自定义组件的 init() 钩子方法调用</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createComponentInstanceForVnode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">vnode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// we know it&#39;s MountedComponentVNode but flow doesn&#39;t</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">parent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// activeInstance in lifecycle state</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalComponentOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        _isComponent: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        _parentVnode: vnode,</span></span>
<span class="line"><span style="color:#E1E4E8;">        parent</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// check inline-template render functions</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inlineTemplate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.data.inlineTemplate</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(inlineTemplate)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        options.render </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inlineTemplate.render</span></span>
<span class="line"><span style="color:#E1E4E8;">        options.staticRenderFns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inlineTemplate.staticRenderFns</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建组件实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> vnode.componentOptions.</span><span style="color:#B392F0;">Ctor</span><span style="color:#E1E4E8;">(options)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. _createElement() 中调用 createComponent()</span></span>
<span class="line"><span style="color:#6A737D;">// src\\core\\vdom\\create-element.js</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">data </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">data.pre) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(Ctor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveAsset</span><span style="color:#24292E;">(context.$options, </span><span style="color:#032F62;">&#39;components&#39;</span><span style="color:#24292E;">, tag))) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查找自定义组件构造函数的声明</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据 Ctor 创建组件的 VNode</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// component</span></span>
<span class="line"><span style="color:#24292E;">    vnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createComponent</span><span style="color:#24292E;">(Ctor, data, context, children, tag)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. createComponent() 中调用创建自定义组件对应的 VNode</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// src\\core\\vdom\\create-component.js</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createComponent</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">Ctor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#6F42C1;">VNodeData</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">context</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">tag</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">    )</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isUndef</span><span style="color:#24292E;">(Ctor)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    ……</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// install component management hooks onto the placeholder node</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 安装组件的钩子函数 init/prepatch/insert/destroy</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 初始化了组件的 data.hooks 中的钩子函数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">installComponentHooks</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// return a placeholder vnode</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Ctor.options.name </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> tag</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建自定义组件的 VNode，设置自定义组件的名字</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 记录this.componentOptions = componentOptions</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">vnode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">\`vue-component-\${</span><span style="color:#24292E;">Ctor</span><span style="color:#032F62;">.</span><span style="color:#24292E;">cid</span><span style="color:#032F62;">}\${</span><span style="color:#24292E;">name</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`-\${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}\`</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;&#39;}\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            data, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, context,</span></span>
<span class="line"><span style="color:#24292E;">            { Ctor, propsData, listeners, tag, children },</span></span>
<span class="line"><span style="color:#24292E;">            asyncFactory</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3. installComponentHooks() 初始化组件的 data.hook</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">installComponentHooks</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VNodeData</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hooks</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.hook </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (data.hook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {})</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 用户可以传递自定义钩子函数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 把用户传入的自定义钩子函数和 componentVNodeHooks 中预定义的钩子函数合并</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> hooksToMerge.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hooksToMerge[i]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">existing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hooks[key]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">toMerge</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> componentVNodeHooks[key]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (existing </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> toMerge </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(existing </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> existing._merged)) {</span></span>
<span class="line"><span style="color:#24292E;">                hooks[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> existing </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeHook</span><span style="color:#24292E;">(toMerge, existing) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> toMerge</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 4. 钩子函数定义的位置（init()钩子中创建组件的实例）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// inline hooks to be invoked on component VNodes during patch</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">componentVNodeHooks</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(</span><span style="color:#E36209;">vnode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VNodeWithData</span><span style="color:#24292E;">, </span><span style="color:#E36209;">hydrating</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">                vnode.componentInstance </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">vnode.componentInstance._isDestroyed </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                vnode.data.keepAlive</span></span>
<span class="line"><span style="color:#24292E;">            ) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// kept-alive components, treat as a patch</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mountedNode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode </span><span style="color:#6A737D;">// work around flow</span></span>
<span class="line"><span style="color:#24292E;">                componentVNodeHooks.</span><span style="color:#6F42C1;">prepatch</span><span style="color:#24292E;">(mountedNode, mountedNode)</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 创建组件实例挂载到 vnode.componentInstance</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">child</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.componentInstance </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">createComponentInstanceForVnode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        vnode,</span></span>
<span class="line"><span style="color:#24292E;">                        activeInstance</span></span>
<span class="line"><span style="color:#24292E;">                    )</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 调用组件对象的 $mount()，把组件挂载到页面</span></span>
<span class="line"><span style="color:#24292E;">                child.</span><span style="color:#6F42C1;">$mount</span><span style="color:#24292E;">(hydrating </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> vnode.elm </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, hydrating)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">prepatch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">oldVnode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MountedComponentVNode</span><span style="color:#24292E;">, </span><span style="color:#E36209;">vnode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MountedComponentVNode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">……</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#E36209;">vnode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MountedComponentVNode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">……</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">(</span><span style="color:#E36209;">vnode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MountedComponentVNode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">……</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//5 .创建组件实例的位置，由自定义组件的 init() 钩子方法调用</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createComponentInstanceForVnode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">vnode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// we know it&#39;s MountedComponentVNode but flow doesn&#39;t</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">parent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// activeInstance in lifecycle state</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalComponentOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        _isComponent: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        _parentVnode: vnode,</span></span>
<span class="line"><span style="color:#24292E;">        parent</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// check inline-template render functions</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">inlineTemplate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.data.inlineTemplate</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(inlineTemplate)) {</span></span>
<span class="line"><span style="color:#24292E;">        options.render </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inlineTemplate.render</span></span>
<span class="line"><span style="color:#24292E;">        options.staticRenderFns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inlineTemplate.staticRenderFns</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建组件实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> vnode.componentOptions.</span><span style="color:#6F42C1;">Ctor</span><span style="color:#24292E;">(options)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br></div></div><p>调试执行过程</p><h3 id="组件实例的创建和挂载过程" tabindex="-1">组件实例的创建和挂载过程 <a class="header-anchor" href="#组件实例的创建和挂载过程" aria-label="Permalink to &quot;组件实例的创建和挂载过程&quot;">​</a></h3><p>Vue._update() --&gt; patch() --&gt; createElm() --&gt; createComponent()</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src\\core\\vdom\\patch.js</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 创建组件实例，挂载到真实 DOM</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">insertedVnodeQueue</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">parentElm</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">refElm</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(i)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isReactivated</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(vnode.componentInstance) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> i.keepAlive</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i.hook) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i.init)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 调用 init() 方法，创建和挂载组件实例</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// init() 的过程中创建好了组件的真实 DOM,挂载到了 vnode.elm 上</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;">(vnode, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* hydrating */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// after calling the init hook, if the vnode is a child component</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// it should&#39;ve created a child instance and mounted it. the child</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// component also has set the placeholder vnode&#39;s elm.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// in that case we can just return the element and be done.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(vnode.componentInstance)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 调用钩子函数（VNode的钩子函数初始化属性/事件/样式等，组件的钩子函数）</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">initComponent</span><span style="color:#E1E4E8;">(vnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 把组件对应的 DOM 插入到父元素中</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(parentElm, vnode.elm, refElm)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isTrue</span><span style="color:#E1E4E8;">(isReactivated)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">reactivateComponent</span><span style="color:#E1E4E8;">(vnode, insertedVnodeQueue, parentElm, refElm)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 调用钩子函数，设置局部作用于样式</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">insertedVnodeQueue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(vnode.data.pendingInsert)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        insertedVnodeQueue.push.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(insertedVnodeQueue,</span></span>
<span class="line"><span style="color:#E1E4E8;">            vnode.data.pendingInsert)</span></span>
<span class="line"><span style="color:#E1E4E8;">        vnode.data.pendingInsert </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    vnode.elm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.componentInstance.$el</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isPatchable</span><span style="color:#E1E4E8;">(vnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调用钩子函数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">invokeCreateHooks</span><span style="color:#E1E4E8;">(vnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置局部作用于样式</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">setScope</span><span style="color:#E1E4E8;">(vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// empty component root.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// skip all element-related modules except for ref (#3455)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">registerRef</span><span style="color:#E1E4E8;">(vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// make sure to invoke the insert hook</span></span>
<span class="line"><span style="color:#E1E4E8;">        insertedVnodeQueue.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 调用钩子函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">invokeCreateHooks</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">insertedVnodeQueue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用 VNode 的钩子函数，初始化属性/样式/事件等</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> cbs.create.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cbs.create[i](emptyNode, vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.data.hook </span><span style="color:#6A737D;">// Reuse variable</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用组件的钩子函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(i)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(i.create)) i.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(emptyNode, vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(i.insert)) insertedVnodeQueue.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src\\core\\vdom\\patch.js</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 创建组件实例，挂载到真实 DOM</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createComponent</span><span style="color:#24292E;">(</span><span style="color:#E36209;">vnode</span><span style="color:#24292E;">, </span><span style="color:#E36209;">insertedVnodeQueue</span><span style="color:#24292E;">, </span><span style="color:#E36209;">parentElm</span><span style="color:#24292E;">, </span><span style="color:#E36209;">refElm</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(i)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isReactivated</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(vnode.componentInstance) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> i.keepAlive</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i.hook) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i.init)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 调用 init() 方法，创建和挂载组件实例</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// init() 的过程中创建好了组件的真实 DOM,挂载到了 vnode.elm 上</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">i</span><span style="color:#24292E;">(vnode, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* hydrating */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// after calling the init hook, if the vnode is a child component</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// it should&#39;ve created a child instance and mounted it. the child</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// component also has set the placeholder vnode&#39;s elm.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// in that case we can just return the element and be done.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(vnode.componentInstance)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 调用钩子函数（VNode的钩子函数初始化属性/事件/样式等，组件的钩子函数）</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">initComponent</span><span style="color:#24292E;">(vnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 把组件对应的 DOM 插入到父元素中</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(parentElm, vnode.elm, refElm)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isTrue</span><span style="color:#24292E;">(isReactivated)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">reactivateComponent</span><span style="color:#24292E;">(vnode, insertedVnodeQueue, parentElm, refElm)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 调用钩子函数，设置局部作用于样式</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initComponent</span><span style="color:#24292E;">(</span><span style="color:#E36209;">vnode</span><span style="color:#24292E;">, </span><span style="color:#E36209;">insertedVnodeQueue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(vnode.data.pendingInsert)) {</span></span>
<span class="line"><span style="color:#24292E;">        insertedVnodeQueue.push.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(insertedVnodeQueue,</span></span>
<span class="line"><span style="color:#24292E;">            vnode.data.pendingInsert)</span></span>
<span class="line"><span style="color:#24292E;">        vnode.data.pendingInsert </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    vnode.elm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.componentInstance.$el</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isPatchable</span><span style="color:#24292E;">(vnode)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用钩子函数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">invokeCreateHooks</span><span style="color:#24292E;">(vnode, insertedVnodeQueue)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置局部作用于样式</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setScope</span><span style="color:#24292E;">(vnode)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// empty component root.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// skip all element-related modules except for ref (#3455)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">registerRef</span><span style="color:#24292E;">(vnode)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// make sure to invoke the insert hook</span></span>
<span class="line"><span style="color:#24292E;">        insertedVnodeQueue.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(vnode)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 调用钩子函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">invokeCreateHooks</span><span style="color:#24292E;">(</span><span style="color:#E36209;">vnode</span><span style="color:#24292E;">, </span><span style="color:#E36209;">insertedVnodeQueue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用 VNode 的钩子函数，初始化属性/样式/事件等</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> cbs.create.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i) {</span></span>
<span class="line"><span style="color:#24292E;">        cbs.create[i](emptyNode, vnode)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.data.hook </span><span style="color:#6A737D;">// Reuse variable</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用组件的钩子函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(i)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(i.create)) i.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(emptyNode, vnode)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isDef</span><span style="color:#24292E;">(i.insert)) insertedVnodeQueue.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(vnode)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div>`,64),e=[o];function c(r,t,E,y,i,b){return n(),a("div",null,e)}const F=s(l,[["render",c]]);export{d as __pageData,F as default};
