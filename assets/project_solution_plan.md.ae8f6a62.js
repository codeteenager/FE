import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.63c771e2.js";const m=JSON.parse('{"title":"前端应用解决方案","description":"","frontmatter":{},"headers":[],"relativePath":"project/solution/plan.md","filePath":"project/solution/plan.md","lastUpdated":1691058402000}'),p={name:"project/solution/plan.md"},o=l(`<h1 id="前端应用解决方案" tabindex="-1">前端应用解决方案 <a class="header-anchor" href="#前端应用解决方案" aria-label="Permalink to &quot;前端应用解决方案&quot;">​</a></h1><p>目前国内大厂开源的umi.js和modern.js都是前端应用解决方案，但它们有不同的特点和用途。</p><p>Umi.js: Umi.js 是一个可插拔的企业级前端应用框架，基于 React 和约定式路由。它提供了一整套开箱即用的功能和约定，包括路由配置、构建工具、插件系统等，使得开发者可以快速搭建和开发复杂的前端应用。Umi.js 支持单页应用（SPA）和多页应用（MPA），并且具有良好的扩展性和灵活性。</p><p>Modern.js: Modern.js 是一个现代化的全栈 JavaScript 框架，旨在提供一种简单、高效的方式来构建现代 Web 应用。它采用了一系列最新的技术和工具，如 Vite、React、Vue、TypeScript 等，以及一些内置的功能模块，如路由、状态管理、国际化等，帮助开发者快速构建现代化的前端应用。Modern.js 还支持服务端渲染（SSR）和静态站点生成（SSG），使得应用更具性能和可扩展性。</p><p>总结来说，Umi.js 更加注重企业级应用的开发和管理，提供了完善的工具和约定；而 Modern.js 则更加注重现代化的开发体验和技术栈的选择，以简洁高效为目标。选择使用哪个框架取决于项目需求、团队技术栈和个人偏好。</p><h2 id="tapable" tabindex="-1">tapable <a class="header-anchor" href="#tapable" aria-label="Permalink to &quot;tapable&quot;">​</a></h2><p><a href="https://github.com/webpack/tapable" target="_blank" rel="noreferrer">Tapable</a>是一个用于创建插件系统的库，它是Webpack的核心依赖之一。Tapable提供了一组钩子（hooks），用于在Webpack构建过程中的不同阶段执行自定义逻辑。</p><p>Tapable的核心概念是钩子（hooks）。钩子是一个具有特定功能的函数，可以被Webpack的插件使用。Webpack在构建过程中会触发不同的钩子，插件可以注册到这些钩子上，并在相应的时机执行自己的逻辑。</p><p>Tapable提供了多种类型的钩子，包括同步钩子(SyncHook)、异步串行钩子(AsyncSeriesHook)、异步并行钩子(AsyncParallelHook)等。不同类型的钩子在触发时机和执行方式上有所区别，可以满足不同场景下的需求。</p><p>通过使用Tapable，开发者可以编写自己的Webpack插件，扩展Webpack的功能。插件可以在Webpack构建过程中的不同阶段执行自定义逻辑，例如在解析模块、优化代码、生成资源等环节进行额外的处理。</p><p>以下是一个简单的示例，展示了如何使用Tapable创建一个简单的Webpack插件：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">SyncHook</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;tapable&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyPlugin</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建一个同步钩子实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hook</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;stats&#39;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注册到compiler的emit钩子上</span></span>
<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.emit.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;MyPlugin&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 执行自定义逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello from MyPlugin!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      hook.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(compilation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注册到自定义钩子上的插件</span></span>
<span class="line"><span style="color:#E1E4E8;">    hook.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;MyPlugin&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">stats</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Stats:&#39;</span><span style="color:#E1E4E8;">, stats);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MyPlugin;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">SyncHook</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;tapable&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyPlugin</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#E36209;">compiler</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建一个同步钩子实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hook</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;stats&#39;</span><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注册到compiler的emit钩子上</span></span>
<span class="line"><span style="color:#24292E;">    compiler.hooks.emit.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;MyPlugin&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">compilation</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 执行自定义逻辑</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello from MyPlugin!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      hook.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(compilation);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注册到自定义钩子上的插件</span></span>
<span class="line"><span style="color:#24292E;">    hook.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;MyPlugin&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">stats</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Stats:&#39;</span><span style="color:#24292E;">, stats);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MyPlugin;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>在上面的示例中，我们创建了一个名为MyPlugin的插件，它注册了一个同步钩子hook。在Webpack的emit阶段，插件会执行自定义逻辑，并通过调用钩子的call方法触发注册在钩子上的插件。</p><p>这只是一个简单的示例，Tapable提供了更多强大的功能和灵活的扩展方式，可以满足各种复杂的插件开发需求。通过使用Tapable，开发者可以更好地理解和控制Webpack的构建过程，实现更高级的定制化功能。</p><p>umi 的插件机制是使用了 tapable 库，我们可以简略的看一下插件流程。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 通过插件加载，把 hooks 整理起来</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hooks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  onStart: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      plugin: </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;开始：执行了 version 插件&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      plugin: </span><span style="color:#9ECBFF;">&quot;other&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;开始：执行了 other 插件&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  onEnd: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      plugin: </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;结束：执行了 version 插件&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      plugin: </span><span style="color:#9ECBFF;">&quot;other&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;结束：执行了 other 插件&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 执行插件中的 onStart 钩子</span></span>
<span class="line"><span style="color:#B392F0;">applyPlugins</span><span style="color:#E1E4E8;">({ key:</span><span style="color:#9ECBFF;">&#39;onStart&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 做点别的什么事情</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;konos@1.0.0&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 执行插件中的 onEnd 钩子</span></span>
<span class="line"><span style="color:#B392F0;">applyPlugins</span><span style="color:#E1E4E8;">({ key: </span><span style="color:#9ECBFF;">&#39;onEnd&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//实现 applyPlugins</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { AsyncSeriesWaterfallHook } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;tapable&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// hooks 详见上方代码</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hooks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">applyPlugins</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">opts</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">; })</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hooks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hooks[opts.key] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tEvent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesWaterfallHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;_&quot;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hook</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> hooks) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      tEvent.</span><span style="color:#B392F0;">tapPromise</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: hook.plugin,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> hook.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tEvent.</span><span style="color:#B392F0;">promise</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 通过插件加载，把 hooks 整理起来</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hooks</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  onStart: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      plugin: </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;开始：执行了 version 插件&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      plugin: </span><span style="color:#032F62;">&quot;other&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;开始：执行了 other 插件&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  onEnd: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      plugin: </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;结束：执行了 version 插件&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      plugin: </span><span style="color:#032F62;">&quot;other&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;结束：执行了 other 插件&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">// 执行插件中的 onStart 钩子</span></span>
<span class="line"><span style="color:#6F42C1;">applyPlugins</span><span style="color:#24292E;">({ key:</span><span style="color:#032F62;">&#39;onStart&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 做点别的什么事情</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;konos@1.0.0&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 执行插件中的 onEnd 钩子</span></span>
<span class="line"><span style="color:#6F42C1;">applyPlugins</span><span style="color:#24292E;">({ key: </span><span style="color:#032F62;">&#39;onEnd&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//实现 applyPlugins</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { AsyncSeriesWaterfallHook } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;tapable&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// hooks 详见上方代码</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hooks</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyPlugins</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">opts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; })</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hooks</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hooks[opts.key] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tEvent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncSeriesWaterfallHook</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;_&quot;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hook</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> hooks) {</span></span>
<span class="line"><span style="color:#24292E;">      tEvent.</span><span style="color:#6F42C1;">tapPromise</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          name: hook.plugin,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> hook.</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tEvent.</span><span style="color:#6F42C1;">promise</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><p>整个过程，其实就是声明一个 <code>AsyncSeriesWaterfallHook</code> 钩子，然后按照插件注册顺序<code>(for(const hook of hooks))</code>，调用各个插件中声明的函数。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/519720238" target="_blank" rel="noreferrer">UMI3源码解析系列之构建原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/520661956" target="_blank" rel="noreferrer">UMI3源码解析系列之运行时插件机制</a></li><li><a href="https://zhuanlan.zhihu.com/p/513291177" target="_blank" rel="noreferrer">umi3源码解析之核心Service类初始化</a></li><li><a href="https://zhuanlan.zhihu.com/p/515714350" target="_blank" rel="noreferrer">UMI3源码解析系列之插件化架构核心</a></li><li><a href="https://www.zhihu.com/column/c_1269578954706702336" target="_blank" rel="noreferrer">umi 源码专栏</a></li></ul><h2 id="中后台解决方案" tabindex="-1">中后台解决方案 <a class="header-anchor" href="#中后台解决方案" aria-label="Permalink to &quot;中后台解决方案&quot;">​</a></h2><p>目前国内开源的中后台解决方案主要有以下几个：</p><ul><li>Ant Design Pro：基于Ant Design搭建的Ant Design Pro，目前最成熟的开箱即用的中台前端/设计解决方案，只有React版本。地址为：<a href="https://pro.ant.design/zh-CN/" target="_blank" rel="noreferrer">https://pro.ant.design/zh-CN/</a></li><li>Arco Design Pro：基于arco design搭建的Arco Design Pro开箱即用的中后台前端解决方案，有React和Vue两个版本。地址为：<a href="http://pro.arco.design/" target="_blank" rel="noreferrer">http://pro.arco.design/</a></li><li>TDesign Starter：基于TDesign搭建的TDesign Starter，有Vue，Vue Next，React三个版本。地址为：<a href="https://tdesign.tencent.com/starter/" target="_blank" rel="noreferrer">https://tdesign.tencent.com/starter/</a></li><li>飞冰：基于 React 的研发解决方案。地址为：<a href="https://iceteam.gitee.io/" target="_blank" rel="noreferrer">https://iceteam.gitee.io/</a></li><li><a href="https://wakeadmin.wakedata.com/" target="_blank" rel="noreferrer">WakeAdmin惟客前端管理后台开发框架</a></li><li><a href="https://umijs.org/" target="_blank" rel="noreferrer">umijs</a></li><li><a href="https://fesjs.mumblefe.cn/" target="_blank" rel="noreferrer">Fes.js</a></li><li><a href="https://modernjs.dev/index.html" target="_blank" rel="noreferrer">Modern.js</a></li></ul><h2 id="开源后台管理系统模板" tabindex="-1">开源后台管理系统模板 <a class="header-anchor" href="#开源后台管理系统模板" aria-label="Permalink to &quot;开源后台管理系统模板&quot;">​</a></h2><ul><li><a href="https://github.com/flipped-aurora/gin-vue-admin" target="_blank" rel="noreferrer">gin-vue-admin</a></li><li><a href="https://github.com/vbenjs/vue-vben-admin" target="_blank" rel="noreferrer">Vue-Vben-Admin</a></li><li><a href="https://github.com/chuzhixin/vue-admin-better" target="_blank" rel="noreferrer">vue-admin-better</a></li><li><a href="https://github.com/pure-admin/vue-pure-admin" target="_blank" rel="noreferrer">vue-pure-admin</a></li><li><a href="https://github.com/jekip/naive-ui-admin" target="_blank" rel="noreferrer">naive-ui-admin</a></li><li><a href="https://github.com/HalseySpicy/Geeker-Admin" target="_blank" rel="noreferrer">Geeker-Admin</a></li><li><a href="https://github.com/buqiyuan/vue3-antd-admin" target="_blank" rel="noreferrer">vue3-antd-admin</a></li><li><a href="https://github.com/RainManGO/vue3-composition-admin" target="_blank" rel="noreferrer">vue3-composition-admin</a></li><li><a href="https://github.com/honghuangdc/soybean-admin" target="_blank" rel="noreferrer">soybean-admin</a></li><li><a href="https://github.com/cmdparkour/vue-admin-box" target="_blank" rel="noreferrer">vue-admin-box</a></li><li><a href="https://github.com/hooray/fantastic-admin" target="_blank" rel="noreferrer">Fantastic-admin</a></li><li><a href="https://github.com/lyt-Top/vue-next-admin" target="_blank" rel="noreferrer">vue-next-admin</a></li><li><a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noreferrer">vue-element-admin</a></li><li><a href="https://gitee.com/pear-admin" target="_blank" rel="noreferrer">pear-admin</a></li><li><a href="https://github.com/zhangdaiscott/jeecg-boot" target="_blank" rel="noreferrer">JEECG-BOOT</a></li><li><a href="https://github.com/chuzhixin/vue-admin-beautiful" target="_blank" rel="noreferrer">vue-admin-beautiful</a></li><li><a href="https://gitee.com/y_project/RuoYi" target="_blank" rel="noreferrer">RuoYi</a></li><li><a href="https://github.com/ant-design/ant-design-pro" target="_blank" rel="noreferrer">ant-design-pro</a></li><li><a href="https://github.com/iview/iview-admin" target="_blank" rel="noreferrer">iview-admin</a></li><li><a href="https://github.com/d2-projects/d2-admin" target="_blank" rel="noreferrer">D2Admin</a></li><li><a href="https://github.com/iczer/vue-antd-admin" target="_blank" rel="noreferrer">Vue-Antd-Admin</a></li><li><a href="https://github.com/HalseySpicy/Hooks-Admin" target="_blank" rel="noreferrer">Hooks-Admin</a></li><li><a href="https://github.com/haojiey/react-mu-admin" target="_blank" rel="noreferrer">react-mu-admin</a></li><li><a href="https://github.com/mvpyb/react-ant-admin" target="_blank" rel="noreferrer">react-ant-admin</a></li><li><a href="https://github.com/yezihaohao/react-admin" target="_blank" rel="noreferrer">react-admin</a></li><li><a href="https://gitee.com/zhazhawu/ant-design-pro-react" target="_blank" rel="noreferrer">ant-design-pro-react</a></li></ul>`,24),e=[o];function r(t,c,E,i,y,b){return n(),a("div",null,e)}const h=s(p,[["render",r]]);export{m as __pageData,h as default};
