import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.63c771e2.js";const b=JSON.parse('{"title":"Monorepo架构","description":"","frontmatter":{},"headers":[],"relativePath":"project/tools/monorepo.md","filePath":"project/tools/monorepo.md","lastUpdated":1698510440000}'),p={name:"project/tools/monorepo.md"},e=l(`<h1 id="monorepo架构" tabindex="-1">Monorepo架构 <a class="header-anchor" href="#monorepo架构" aria-label="Permalink to &quot;Monorepo架构&quot;">​</a></h1><h2 id="什么是monorepo" tabindex="-1">什么是Monorepo <a class="header-anchor" href="#什么是monorepo" aria-label="Permalink to &quot;什么是Monorepo&quot;">​</a></h2><p>Monorepo是一种代码组织思想，它要求我们只用一个代码仓库来管理一个大项目的所有资源、子项目，简单来说交易前放在多个repo里的代码现在就放在一个repo就行了。</p><p>Multirepo(传统多repo项目)会将一个项目按照职责、业务模块进行拆分，然后创建不同的代码仓库进行管理。不同的团队可以专注于负责某一个代码仓库代码提交、编译、发布。</p><h2 id="lerna" tabindex="-1">Lerna <a class="header-anchor" href="#lerna" aria-label="Permalink to &quot;Lerna&quot;">​</a></h2><p>Lerna是一个管理工具，用于管理包含多个软件包(package)的javaScript项目，使用git和npm管理多软件包代码仓库工作流程进行优化。</p><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lerna</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lerna</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="初始化仓库-项目" tabindex="-1">初始化仓库/项目 <a class="header-anchor" href="#初始化仓库-项目" aria-label="Permalink to &quot;初始化仓库/项目&quot;">​</a></h3><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lerna-repo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lerna-repo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">lerna</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lerna-repo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lerna-repo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">lerna</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="常用命令行" tabindex="-1">常用命令行 <a class="header-anchor" href="#常用命令行" aria-label="Permalink to &quot;常用命令行&quot;">​</a></h3><ul><li><code>lerna publish</code></li><li><code>lerna version</code></li><li><code>lerna bootstrap</code></li><li><code>lerna list</code></li><li><code>lerna changed</code></li><li><code>lerna diff</code></li><li><code>lerna exec</code></li><li><code>lerna run</code></li><li><code>lerna init</code></li><li><code>lerna add</code></li><li><code>lerna clean</code></li><li><code>lerna create</code></li></ul><h3 id="lerna-init" tabindex="-1">lerna init <a class="header-anchor" href="#lerna-init" aria-label="Permalink to &quot;lerna init&quot;">​</a></h3><p>对当前项目进行lerna结构初始化</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 参数 </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">independent</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">i 使用独立版本控制模式，默认是fix模式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># Fixed</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Locked </span><span style="color:#B392F0;">mode</span><span style="color:#E1E4E8;">(default)：默认固定模式下所有包的主版本号和次版本都会使用lerna.json配置里的version字段定义的版本号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">每次publish时，将得到一个提示符，提示每个已更改的包，已指定是补丁、次要更改、主要更改还是自定义更改</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">如果某一次只修改了其中一个或几个包，但修改了配置文件里的主版本号或次版本号，那么发布时所有的包都会统一升级到该版本并进行发布</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">单个的包如果想要发布只能修改修订版本号进行发布</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># independent mode独立版本模式：每个包使用独立的版本号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 每次publish时，您都将得到一个提示符，提示每个已更改的包，以指定是补丁、次要更改、主要更改还是自定义更改。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">lerna init </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">independent </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> lerna init </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> i</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 参数 </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">independent</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">i 使用独立版本控制模式，默认是fix模式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># Fixed</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Locked </span><span style="color:#6F42C1;">mode</span><span style="color:#24292E;">(default)：默认固定模式下所有包的主版本号和次版本都会使用lerna.json配置里的version字段定义的版本号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">每次publish时，将得到一个提示符，提示每个已更改的包，已指定是补丁、次要更改、主要更改还是自定义更改</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">如果某一次只修改了其中一个或几个包，但修改了配置文件里的主版本号或次版本号，那么发布时所有的包都会统一升级到该版本并进行发布</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">单个的包如果想要发布只能修改修订版本号进行发布</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># independent mode独立版本模式：每个包使用独立的版本号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 每次publish时，您都将得到一个提示符，提示每个已更改的包，以指定是补丁、次要更改、主要更改还是自定义更改。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">lerna init </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">independent </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> lerna init </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> i</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="lerna-create-package-name" tabindex="-1">lerna create [package name] <a class="header-anchor" href="#lerna-create-package-name" aria-label="Permalink to &quot;lerna create [package name]&quot;">​</a></h3><p>创建子项目包</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">y 子项目走默认初始化配置</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">y 子项目走默认初始化配置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="lerna-add" tabindex="-1">lerna add <a class="header-anchor" href="#lerna-add" aria-label="Permalink to &quot;lerna add&quot;">​</a></h3><p>增加本地或者远程package作为当前项目packages里面的依赖</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 安装module1 作为module的业务依赖</span></span>
<span class="line"><span style="color:#E1E4E8;">lerna add </span><span style="color:#79B8FF;">module</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">scope </span><span style="color:#79B8FF;">module</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 安装module1作为module的开发依赖</span></span>
<span class="line"><span style="color:#E1E4E8;">lerna add </span><span style="color:#79B8FF;">module</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">scope </span><span style="color:#79B8FF;">module</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 安装module1作为所有子项目的依赖，除了module1自身</span></span>
<span class="line"><span style="color:#E1E4E8;">lerna add </span><span style="color:#79B8FF;">module</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 向所有的子项目中安装babel</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">core</span></span>
<span class="line"><span style="color:#E1E4E8;">lerna add babel</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">core</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 安装module1 作为module的业务依赖</span></span>
<span class="line"><span style="color:#24292E;">lerna add </span><span style="color:#005CC5;">module</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">scope </span><span style="color:#005CC5;">module</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 安装module1作为module的开发依赖</span></span>
<span class="line"><span style="color:#24292E;">lerna add </span><span style="color:#005CC5;">module</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">scope </span><span style="color:#005CC5;">module</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 安装module1作为所有子项目的依赖，除了module1自身</span></span>
<span class="line"><span style="color:#24292E;">lerna add </span><span style="color:#005CC5;">module</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 向所有的子项目中安装babel</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">core</span></span>
<span class="line"><span style="color:#24292E;">lerna add babel</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">core</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="lerna-bootstrap" tabindex="-1">lerna bootstrap <a class="header-anchor" href="#lerna-bootstrap" aria-label="Permalink to &quot;lerna bootstrap&quot;">​</a></h3><p>安装各个子项目的声明的依赖，并通过软连接的方式处理子项目间的依赖㽑</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">hoist 来将依赖安装到根目录已达成子项目共享node_modules</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">hoist 来将依赖安装到根目录已达成子项目共享node_modules</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="lerna-version" tabindex="-1">lerna version <a class="header-anchor" href="#lerna-version" aria-label="Permalink to &quot;lerna version&quot;">​</a></h3><p>这个命令会甄别出自上次发布版本依赖现有各子项目的git本地提交（统一管理一个待发布版本的提交信息），并针对这些代码更新进行npm package.json版本号的递增（子项目有修改才会递增，无则忽略）。修改changelog、创建git release tag、创建提交并推送到git服务器。</p><h3 id="lerna-publish" tabindex="-1">lerna publish <a class="header-anchor" href="#lerna-publish" aria-label="Permalink to &quot;lerna publish&quot;">​</a></h3><p>需要先npm login</p><p>运行这个命令会发布所有子项目git现在未发布的提交到npm（这个命令内部同时也会执行lerna version一样的操作）。这个命令会触发npm发布相关的生命周期函数，可以在lerna.json中声明对应的回调以执行需要的过程。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">特点： 会打tag，上传git，上传npm。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">如果你的包名是带scope的例如：</span><span style="color:#9ECBFF;">\`&quot;name&quot;: &quot;@owljs/test&quot;\`</span><span style="color:#E1E4E8;">，那需要再package.json添加</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&quot;publishConfig&quot;</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;access&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;public&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">特点： 会打tag，上传git，上传npm。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">如果你的包名是带scope的例如：</span><span style="color:#032F62;">\`&quot;name&quot;: &quot;@owljs/test&quot;\`</span><span style="color:#24292E;">，那需要再package.json添加</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;publishConfig&quot;</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;access&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;public&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="lerna-run" tabindex="-1">lerna run <a class="header-anchor" href="#lerna-run" aria-label="Permalink to &quot;lerna run&quot;">​</a></h3><p>运行某个包的某个指令</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">lerna run </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> [..args] #运行所有包里面的这个script的指令</span></span>
<span class="line"><span style="color:#E1E4E8;">lerna run </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">scope my</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">component test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">lerna run </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> [..args] #运行所有包里面的这个script的指令</span></span>
<span class="line"><span style="color:#24292E;">lerna run </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">scope my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">component test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="lerna-clean" tabindex="-1">lerna clean <a class="header-anchor" href="#lerna-clean" aria-label="Permalink to &quot;lerna clean&quot;">​</a></h3><p>清空所有子项目的node_modules，会提问我们是否继续，选择yes</p><h3 id="lerna-changed" tabindex="-1">lerna changed <a class="header-anchor" href="#lerna-changed" aria-label="Permalink to &quot;lerna changed&quot;">​</a></h3><p>列出下次发版lerna publish要更新的包</p><h3 id="lerna-list" tabindex="-1">lerna list <a class="header-anchor" href="#lerna-list" aria-label="Permalink to &quot;lerna list&quot;">​</a></h3><p>列出所有的包</p><h3 id="lerna-exec" tabindex="-1">lerna exec <a class="header-anchor" href="#lerna-exec" aria-label="Permalink to &quot;lerna exec&quot;">​</a></h3><p>运行任意命令在每个包</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">lerna exec </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">command</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> [..args] # runs the command </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> all packages</span></span>
<span class="line"><span style="color:#E1E4E8;">lerna exec </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> rm </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rf .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_modules</span></span>
<span class="line"><span style="color:#E1E4E8;">lerna exec </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> protractor conf.js</span></span>
<span class="line"><span style="color:#E1E4E8;">lerna exec </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">scope my</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">component </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> ls </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">la</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">lerna exec </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">command</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> [..args] # runs the command </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> all packages</span></span>
<span class="line"><span style="color:#24292E;">lerna exec </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> rm </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rf .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_modules</span></span>
<span class="line"><span style="color:#24292E;">lerna exec </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> protractor conf.js</span></span>
<span class="line"><span style="color:#24292E;">lerna exec </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">scope my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">component </span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> ls </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">la</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">git remote add origin </span><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//gitee.com/xxx/xxx.git</span></span>
<span class="line"><span style="color:#E1E4E8;">git push </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">u origin </span><span style="color:#9ECBFF;">&quot;master&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">git remote add origin </span><span style="color:#6F42C1;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//gitee.com/xxx/xxx.git</span></span>
<span class="line"><span style="color:#24292E;">git push </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">u origin </span><span style="color:#032F62;">&quot;master&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="yarn和lerna有很多重复工作" tabindex="-1">yarn和lerna有很多重复工作 <a class="header-anchor" href="#yarn和lerna有很多重复工作" aria-label="Permalink to &quot;yarn和lerna有很多重复工作&quot;">​</a></h2><p>yarn负责依赖管理</p><p>lerna负责打包发布</p><p>yarn workspace是Yarn提供的monorepo下，管理依赖的机制。对代码仓库下，多个package的依赖，进行管理：将共同的依赖，做hosting(提升)。这样，可以防止package的包重复安装。workspace机制，会在根目录下，统一安装依赖到node_module，并生成yarn.lock。单个package下，不需要再生成yarn.lock。</p><p>当使用lerna + yarn worksapce时，lerna的--hoist会被禁用，我们直接使用yarn install即可实现相同功能。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 集成yarn workspace</span></span>
<span class="line"><span style="color:#E1E4E8;"># package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;private&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;devDenpendencies&quot;</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;lerna&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;^4.0.0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;workspaces&quot;</span><span style="color:#E1E4E8;">:[</span><span style="color:#9ECBFF;">&quot;packages/*&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 集成yarn workspace</span></span>
<span class="line"><span style="color:#24292E;"># package.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;private&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;devDenpendencies&quot;</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;lerna&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;^4.0.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;workspaces&quot;</span><span style="color:#24292E;">:[</span><span style="color:#032F62;">&quot;packages/*&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># lerna.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;packages&quot;</span><span style="color:#E1E4E8;">:[</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;packages/*&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;independent&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//独立版本</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;npmClient&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;yarn&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//默认npm</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;useWorkspaces&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># lerna.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;packages&quot;</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;packages/*&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;independent&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//独立版本</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;npmClient&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;yarn&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//默认npm</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;useWorkspaces&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 清理环境</span></span>
<span class="line"><span style="color:#E1E4E8;">lerna clean #清理所有的node_modules</span></span>
<span class="line"><span style="color:#E1E4E8;">yarn worksapces run clean # 执行所有的package的clean操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#安装依赖</span></span>
<span class="line"><span style="color:#E1E4E8;">yarn install 等价于lerna bootstrap </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">npm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">client yarn </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">use</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">workspaces</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">给某个package安装依赖</span></span>
<span class="line"><span style="color:#E1E4E8;"># 将packageA作为packageB的依赖进行安装</span></span>
<span class="line"><span style="color:#E1E4E8;">yarn workspace packageB add packageA</span></span>
<span class="line"><span style="color:#E1E4E8;">lerna add packageB </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">scope packageA</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">给所有的package安装依赖</span></span>
<span class="line"><span style="color:#E1E4E8;">使用yarn workspace add lodash 给所有的package安装依赖</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">给root安装依赖：一般的公用的开发工具都是安装在root里，如typescript，我们使用yarn add </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">W</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">D</span><span style="color:#E1E4E8;"> typescript来给root安装依赖</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 清理环境</span></span>
<span class="line"><span style="color:#24292E;">lerna clean #清理所有的node_modules</span></span>
<span class="line"><span style="color:#24292E;">yarn worksapces run clean # 执行所有的package的clean操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#安装依赖</span></span>
<span class="line"><span style="color:#24292E;">yarn install 等价于lerna bootstrap </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">npm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">client yarn </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">use</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">workspaces</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">给某个package安装依赖</span></span>
<span class="line"><span style="color:#24292E;"># 将packageA作为packageB的依赖进行安装</span></span>
<span class="line"><span style="color:#24292E;">yarn workspace packageB add packageA</span></span>
<span class="line"><span style="color:#24292E;">lerna add packageB </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">scope packageA</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">给所有的package安装依赖</span></span>
<span class="line"><span style="color:#24292E;">使用yarn workspace add lodash 给所有的package安装依赖</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">给root安装依赖：一般的公用的开发工具都是安装在root里，如typescript，我们使用yarn add </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">W</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">D</span><span style="color:#24292E;"> typescript来给root安装依赖</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,51),o=[e];function r(c,t,i,E,y,d){return a(),n("div",null,o)}const m=s(p,[["render",r]]);export{b as __pageData,m as default};
