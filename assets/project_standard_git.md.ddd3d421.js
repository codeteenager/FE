import{_ as e,c as l,o as a,a as s}from"./app.9879908b.js";const i="/FE/project/22.png",n="/FE/project/23.png",y=JSON.parse('{"title":"Git工作流规范","description":"","frontmatter":{},"headers":[{"level":2,"title":"版本规范","slug":"版本规范","link":"#版本规范","children":[]},{"level":2,"title":"Git分支模型","slug":"git分支模型","link":"#git分支模型","children":[{"level":3,"title":"master分支","slug":"master分支","link":"#master分支","children":[]},{"level":3,"title":"dev分支","slug":"dev分支","link":"#dev分支","children":[]},{"level":3,"title":"feature分支","slug":"feature分支","link":"#feature分支","children":[]},{"level":3,"title":"preview分支","slug":"preview分支","link":"#preview分支","children":[]},{"level":3,"title":"release分支","slug":"release分支","link":"#release分支","children":[]},{"level":3,"title":"git flow 风格的release分支","slug":"git-flow-风格的release分支","link":"#git-flow-风格的release分支","children":[]},{"level":3,"title":"自定义风格release分支","slug":"自定义风格release分支","link":"#自定义风格release分支","children":[]}]},{"level":2,"title":"提交信息规范","slug":"提交信息规范","link":"#提交信息规范","children":[{"level":3,"title":"格式","slug":"格式","link":"#格式","children":[]}]},{"level":2,"title":"Bug处理规则","slug":"bug处理规则","link":"#bug处理规则","children":[]},{"level":2,"title":"如何处理定制化需求","slug":"如何处理定制化需求","link":"#如何处理定制化需求","children":[]}],"relativePath":"project/standard/git.md","lastUpdated":1670674756000}'),r={name:"project/standard/git.md"},t=s('<h1 id="git工作流规范" tabindex="-1">Git工作流规范 <a class="header-anchor" href="#git工作流规范" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">Git</p><p>廖雪峰的Git教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/" target="_blank" rel="noreferrer">https://www.liaoxuefeng.com/wiki/896043488029600/</a></p><p>阮一峰的Git原理入门：<a href="https://www.ruanyifeng.com/blog/2018/10/git-internals.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2018/10/git-internals.html</a></p></div><h2 id="版本规范" tabindex="-1">版本规范 <a class="header-anchor" href="#版本规范" aria-hidden="true">#</a></h2><p>前端项目使用<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">语义化版本</a>进行发布:</p><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ol><li>主版本号：当你做了不兼容的 API 修改。</li><li>次版本号：当你做了向下兼容的功能性新增。</li><li>修订号：当你做了向下兼容的问题修正。</li></ol><p>先行版本号及版本编译元数据可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p><h2 id="git分支模型" tabindex="-1">Git分支模型 <a class="header-anchor" href="#git分支模型" aria-hidden="true">#</a></h2><h3 id="master分支" tabindex="-1">master分支 <a class="header-anchor" href="#master分支" aria-hidden="true">#</a></h3><p>master分支表示一个稳定的发布版本. 对应GZB的大版本.</p><ul><li>场景: 前端应用会跟随工作包版本迭代, 在dev分支测试稳定后, 会合并到master分支, 并使用tag标记应用版本和对应的工作宝版本</li><li>tag规范: v{APP_version}@{GZB_version}, 例如v0.1.0@GZB_6.6</li><li>人员: 由项目负责人进行审核合并, 普通开发者没有权限</li></ul><h3 id="dev分支" tabindex="-1">dev分支 <a class="header-anchor" href="#dev分支" aria-hidden="true">#</a></h3><p>开发者主要工作的分支, 最新的特性或bug修复都会提交到这个分支. 开发者如果在该分支进行了提交，在push到远程之前应该先pull一下， 并尽量使用rebase模式，保证分支的简洁</p><ul><li>命名规范: dev</li><li>tag规范: 在dev分支中也可能会经历发布过程, 例如bug修复版本. 这里同样使用tag来标记这些发布. 例如v0.1.1</li><li>提交规范：如果实在开发分支上进行开发，在推送到远程之前，应该使用git rebase形式更新本地分支。</li></ul><h3 id="feature分支" tabindex="-1">feature分支 <a class="header-anchor" href="#feature分支" aria-hidden="true">#</a></h3><p>涉及多人协作或者大功能的开发, 应该从dev分支checkout出独立的feature分支, 避免干扰dev分支</p><ul><li><p>场景:</p><ul><li>涉及多人协作: 团队多个成员在同一个项目下负责开发不同的功能, 这时候每个成员在自己的feature分支独立开发</li><li>大功能开发: 大功能开发跨越周期比较长, 需要多次迭代才会稳定. 这时候应该在独立的分支上开发. 方便跟踪历史记录, 也免于干扰dev分支的迭代和发布</li></ul></li><li><p>命名规范</p><ul><li>feature/name: name是功能名称</li><li>feature/GZB_version: 这也是团队常见的模式, 当无法使用一个功能名称来描述时, 可以使用GZB版本号作为’功能’</li></ul></li><li><p>合并时机</p><ul><li>当feature分支迭代稳定, 并通过测试后, 合并到dev分支. 合并到dev后, feature分支的生命周期就结束了. 后续bug修复和功能优化直接在dev开发</li><li>当多个feature分支需要合并对外发布临时版本时. 合并到preview分支 . ⚠️这种情况不应该合并到dev分支, 因为feature分支可能还不稳定或未完成. 比如为了联调某些功能.</li></ul></li><li><p>合并方式</p><ul><li>不要使用fast-forward. 这样可以在分支图上查看到分支历史</li></ul></li></ul><h3 id="preview分支" tabindex="-1">preview分支 <a class="header-anchor" href="#preview分支" aria-hidden="true">#</a></h3><p>临时的预览分支, preview分支用于临时合并feature分支, 这其中可能会修复某些bug或者冲突. 可以选择性地将这些提交cherrypick回feature分支. 当预览结束后就可以销毁preview分支</p><h3 id="release分支" tabindex="-1">release分支 <a class="header-anchor" href="#release分支" aria-hidden="true">#</a></h3><p>release分支有两种使用策略，第一种遵循gitFlow流程, 第二种是目前后端团队使用的策略，为了配合后端工作，我们主要使用第二种</p><h3 id="git-flow-风格的release分支" tabindex="-1">git flow 风格的release分支 <a class="header-anchor" href="#git-flow-风格的release分支" aria-hidden="true">#</a></h3><p>当前前端应用的稳定版本和GZB版本绑定. release分支不一定存在, 一般情况下, 只会在前端版本稳定后, 将其合并到master, 并创建tag标记. 而只有需要为指定的正式版本修复bug时才会创建release分支</p><p><img src="'+i+'" alt=""></p><ul><li>场景: 需要为某个正式版本修复bug(hotFix)时, 从master的对应tag中checkout release分支</li><li>命名规范: release/{GZB_version} 外部人员只会关注GZB版本</li><li>如何修复 <ul><li>如果对应bug可以在dev分支直接被修复, 可以先提交到dev分支(或者已经修复了), 然后再cherrypick到release分支</li><li>如果bug在新版本无法复现. 比如新版本升级了依赖. 那么在release分支直接修复即可</li></ul></li></ul><h3 id="自定义风格release分支" tabindex="-1">自定义风格release分支 <a class="header-anchor" href="#自定义风格release分支" aria-hidden="true">#</a></h3><p><img src="'+n+`" alt=""></p><p>当要发布一个工作宝对应的版本时（或者一开始开发时）从dev分支checkout出一个开发分支，后续需要对外发布时，将dev分支合并到release分支, 并打上版本tag. 后面会介绍到后端开发和自动交付机制这种分支模式。</p><p>这一种使用策略. gzb后端在使用, 为了配合后端工作, 我们也推荐使用这种方式</p><ul><li>何时创建: <ul><li>开启GZB新版本开发任务时(推荐)</li><li>向外发布第一个版本时</li></ul></li><li>何时合并：后面dev有版本发布都要合并到release分支，直到开启另一条release分支</li><li>好处 <ul><li>对发布内容进行筛选</li><li>专门用于发布, 开发者容易过滤变更的内容</li></ul></li></ul><h2 id="提交信息规范" tabindex="-1">提交信息规范 <a class="header-anchor" href="#提交信息规范" aria-hidden="true">#</a></h2><p>一个好的提交信息, 会帮助你提高项目的整体质量.</p><ul><li>why <ul><li>格式统一的提交信息可以帮助自动化生成changelog</li><li>版本库不只是存放代码的仓库, 也记录项目的开发记录. 这些记录应该可以帮助后来者快速地学习和回顾代码. 也应该方便其他协作者review你的代码</li></ul></li><li>原则: 半年后, 你能看懂你的commit做了什么东西</li><li>方式: 使用git commit(打开编辑器)而不是git commit -m</li><li>必要信息 <ul><li>为什么进行这次提交? <ul><li>提交改变了什么, 让其他reviewer更容易审核代码和忽略无关的改变</li></ul></li><li>如何解决的问题? <ul><li>问题是什么导致的？</li><li>简短说明使用什么方式, 策略, 修复了问题.</li></ul></li><li>变化可能影响哪些地方 <ul><li>说明变动功能的细节。 一个提交不应该做超过2个功能的变动</li></ul></li></ul></li></ul><h3 id="格式" tabindex="-1">格式 <a class="header-anchor" href="#格式" aria-hidden="true">#</a></h3><p>我们采用angular的提交规范, 在这个规范的基础上支持(可选)emoji进行修饰</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">scope</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">): </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">subject</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="header" tabindex="-1">header <a class="header-anchor" href="#header" aria-hidden="true">#</a></h4><blockquote><p>如果提交时feature或者fix(已发布的版本), 这些提交信息应该出现在CHANGELOG</p></blockquote><ul><li>type: 说明commit的类别. 可以配合emoji使用, 让阅读者更快地区分提交的类型,允许以下类型: <ul><li>✨feature或feat: 引入新功能</li><li>🐛fix: 修复了bug</li><li>📝docs: 文档</li><li>🎨style: 优化项目结构或者代码格式</li><li>♻️refactor: 代码重构. 代码重构不涉及新功能和bug修复. 不应该影响原有功能, 包括对外暴露的接口</li><li>✅test: 增加测试</li><li>⏫chore: 构建过程, 辅助工具升级. 如升级依赖, 升级构建工具</li><li>⚡️perf: 性能优化</li><li>⏪ revert: revert之前的commit <ul><li>git revert 命令用于撤销之前的一个提交, 并在为这个撤销操作生成一个提交</li></ul></li><li>🎉 build或release: 构建或发布版本</li><li>🔒 safe: 修复安全问题</li></ul></li><li>scope: 可选. 说明提交影响的范围. 例如样式, 后端接口, 逻辑层等等</li><li>Subject: 提交目的的简短描述, 动词开头, 不超过80个字符. 不要为了提交而提交</li></ul><h4 id="body" tabindex="-1">body <a class="header-anchor" href="#body" aria-hidden="true">#</a></h4><p>可选. 对本次提交的详细描述. 如果变动很简单, 可以省略</p><h4 id="footer" tabindex="-1">footer <a class="header-anchor" href="#footer" aria-hidden="true">#</a></h4><p>可选. 只用于说明不兼容变动(break change)和关闭 Issue(如果使用使用gitlab或github管理bug的话)</p><h4 id="模板和示例" tabindex="-1">模板和示例 <a class="header-anchor" href="#模板和示例" aria-hidden="true">#</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"># </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">character subject line  </span></span>
<span class="line"><span style="color:#A6ACCD;">#  </span></span>
<span class="line"><span style="color:#A6ACCD;"># </span><span style="color:#F78C6C;">72</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">character wrapped longer description</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> This should </span><span style="color:#FFCB6B;">answer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">#  </span></span>
<span class="line"><span style="color:#A6ACCD;"># </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> Why was </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> change necessary</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;"># </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> How does it address the problem</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;"># </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> Are there any side effects</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">#  </span></span>
<span class="line"><span style="color:#A6ACCD;"># Include a link to the ticket</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> if any</span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="bug处理规则" tabindex="-1">Bug处理规则 <a class="header-anchor" href="#bug处理规则" aria-hidden="true">#</a></h2><p>对于测试，目前会经历两个阶段</p><ul><li>冒烟测试：在对测试正式发版之前会要求对代码进行自测，及冒烟测试。</li><li>正式测试阶段：正式测试阶段测试人员会在RDMS进行bug提交和管理，对BUG的处理规则如下： <ul><li>[解决待关闭]: 修改了程序代码, 问题解决;</li><li>[不做处理]: 没有修改程序代码, 是由于其他原因(需求变更等), 而解决的问题;</li><li>[退回]: 无规律或只出现一次的BUG, 研发没找到原因, 加上必要排查日志后, 可退回给测试; 复现后重新打开</li><li>[正在处理]: 已大致定位原因, 需要较多时间处理的BUG, 可置为&quot;正在处理&quot;</li></ul></li></ul><h2 id="如何处理定制化需求" tabindex="-1">如何处理定制化需求 <a class="header-anchor" href="#如何处理定制化需求" aria-hidden="true">#</a></h2><ul><li>痛点 <ul><li>对于定制化需求, 并不会引入到正规的代码流中, 一般情况下会checkout出一个分支, 来专门做这里定制化需求, 然后单独发版. 使用分支模式的缺点有: <ul><li>更新问题 <ul><li>每次正规代码更新都要合并到该分支. 当分支较多时分支图就会比较混乱</li><li>正规代码合并是必然会带来风险的, 比如项目结构变动, 依赖库变动. 都可能导致定制化的代码失效</li></ul></li></ul></li></ul></li><li>解决办法 <ul><li>减少代码耦合 <ul><li>尽量将定制化需求模块化, 最小化和正规代码之间的接触面. 这是解决该问题最根本的方式. <ul><li>检验方式是结构变化时, 没有或很少适配代码</li></ul></li></ul></li><li>考虑通过代码层面区分 <ul><li>例如通过权限系统来配置. 通过后端接口动态配置</li></ul></li><li>优先使用fork模式 <ul><li>有些场景确实无法通过代码层面解决, 比如ios应用定制启动图, icon, 应用名称, 外观等等. 这种方式优先使用fork模式, fork模式和分支模式没本质区别, 但是至少可以避免干扰正规开发流程</li></ul></li></ul></li></ul>`,50),p=[t];function o(c,u,d,h,g,b){return a(),l("div",null,p)}const D=e(r,[["render",o]]);export{y as __pageData,D as default};
