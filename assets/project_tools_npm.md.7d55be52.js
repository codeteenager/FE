import{_ as n,c as s,o as p,a as e}from"./app.c7d605d1.js";const a="/FE/project/2.png",l="/FE/project/3.png",i="/FE/project/4.png",k=JSON.parse('{"title":"npm","description":"","frontmatter":{},"headers":[{"level":2,"title":"npm诞生背景","slug":"npm诞生背景","link":"#npm诞生背景","children":[]},{"level":2,"title":"npm介绍","slug":"npm介绍","link":"#npm介绍","children":[]},{"level":2,"title":"npm的局限","slug":"npm的局限","link":"#npm的局限","children":[]},{"level":2,"title":"npm内部机制和核心原理","slug":"npm内部机制和核心原理","link":"#npm内部机制和核心原理","children":[{"level":3,"title":"npm 的安装机制和背后思想","slug":"npm-的安装机制和背后思想","link":"#npm-的安装机制和背后思想","children":[]},{"level":3,"title":"npm缓存机制","slug":"npm缓存机制","link":"#npm缓存机制","children":[]}]},{"level":2,"title":"npm的使用技巧","slug":"npm的使用技巧","link":"#npm的使用技巧","children":[{"level":3,"title":"配置 npm init 默认字段来自定义 npm init 的内容","slug":"配置-npm-init-默认字段来自定义-npm-init-的内容","link":"#配置-npm-init-默认字段来自定义-npm-init-的内容","children":[]},{"level":3,"title":"利用 npm link，高效率在本地调试以验证包的可用性","slug":"利用-npm-link-高效率在本地调试以验证包的可用性","link":"#利用-npm-link-高效率在本地调试以验证包的可用性","children":[]},{"level":3,"title":"npx 的作用","slug":"npx-的作用","link":"#npx-的作用","children":[]}]},{"level":2,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"relativePath":"project/tools/npm.md","lastUpdated":1670674756000}'),t={name:"project/tools/npm.md"},r=e('<h1 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-hidden="true">#</a></h1><p>前端工程化离不开 npm（node package manager） 或者 Yarn 这些管理工具。npm 或 Yarn 在工程项目中，除了负责依赖的安装和维护以外，还能通过 npm scripts 串联起各个职能部分，让独立的环节自动运转起来。</p><h2 id="npm诞生背景" tabindex="-1">npm诞生背景 <a class="header-anchor" href="#npm诞生背景" aria-hidden="true">#</a></h2><p>npm由程序员isaacs(<a href="https://github.com/isaacs" target="_blank" rel="noreferrer">https://github.com/isaacs</a>)发明，他的初步思路是集中管理所有的模块，所有的模块都上传到仓库中(registry)。在模块内创建package.json标注模块的基本信息，像模块名、版本、依赖库等等，然后通过npm publish发布模块上传倒npm仓库中(registry)，最后通过npm install安装模块，模块安装到node_modules目录下。npm于2014年商业化，2020年被Github收购。</p><h2 id="npm介绍" tabindex="-1">npm介绍 <a class="header-anchor" href="#npm介绍" aria-hidden="true">#</a></h2><p>npm解决的核心问题是模块管理问题，npm包含cli脚手架、模块仓库、官网(<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">https://www.npmjs.com/</a>)三大部分。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于npm的相关信息可以查阅：<a href="https://docs.npmjs.com/about-npm" target="_blank" rel="noreferrer">https://docs.npmjs.com/about-npm</a></p></div><p><img src="'+a+'" alt=""></p><p>产生一个模块首先通过npm init来创建一个模块，创建的模块中包含package.json，我们通过修改name、version、dependencies来确定模块的基本信息，如果模块想使用其他的模块则需要使用npm install来安装其他的模块，将模块下载到node_modules目录中，其中模块也包含package.json和node_modules这就是npm的规范。</p><p>当module1开发完成后，调用npm publish上传到npm registry中，registry包含两部分，一部分是public公开的，任何人都能使用，另一部分是private私有的，现在npm商业化后主要靠私有仓库收费。</p><p>public共有仓库又分为两种，一种是普通的仓库，一种是组织的仓库。</p><p>常见的npm命令如下：</p><ul><li>npm init：创建模块</li><li>npm install：安装模块</li><li>npm publish：发布模块</li><li>npm link：关联本地模块进行本地开发</li><li>npm config：查看或调整本地配置</li><li>npm run：调用scripts</li></ul><h2 id="npm的局限" tabindex="-1">npm的局限 <a class="header-anchor" href="#npm的局限" aria-hidden="true">#</a></h2><p>npm只能解决模块的高校管理和获取问题，无法解决性能加载性能问题。所以模块化发明后，制约其广泛应用的因素就是性能因素。</p><h2 id="npm内部机制和核心原理" tabindex="-1">npm内部机制和核心原理 <a class="header-anchor" href="#npm内部机制和核心原理" aria-hidden="true">#</a></h2><p>我们先来看看 npm 的核心目标：</p><blockquote><p>Bring the best of open source to you, your team and your company. 给你和你的团队、你的公司带来最好的开源库和依赖。</p></blockquote><p>通过这句话，我们可以知道 npm 最重要的一环是安装和维护依赖。在平时开发中，“删除 node_modules，重新 npm install”是一个百试不爽的解决 npm 安装类问题的方法。</p><h3 id="npm-的安装机制和背后思想" tabindex="-1">npm 的安装机制和背后思想 <a class="header-anchor" href="#npm-的安装机制和背后思想" aria-hidden="true">#</a></h3><p>它会优先安装依赖包到当前项目目录，使得不同应用项目的依赖各成体系，同时还减轻了包作者的 API 兼容性压力，但这样做的缺陷也很明显：如果我们的项目 A 和项目 B，都依赖了相同的公共库 C，那么公共库 C 一般都会在项目 A 和项目 B 中，各被安装一次。这就说明，同一个依赖包可能在我们的电脑上进行多次安装。</p><p>当然，对于一些工具模块比如 supervisor 和 gulp，你仍然可以使用全局安装模式，这样方便注册 path 环境变量，我们可以在任何地方直接使用 supervisor、 gulp 这些命令。（不过，一般还是建议不同项目维护自己局部的 gulp 开发工具以适配不同项目需求。）</p><p>npm的安装机制如下图所示：</p><p><img src="'+l+`" alt=""></p><p>npm install 执行之后，首先，检查并获取 npm 配置，这里的优先级为：项目级的 .npmrc 文件 &gt; 用户级的 .npmrc 文件&gt; 全局级的 .npmrc 文件 &gt; npm 内置的 .npmrc 文件。</p><p>然后检查项目中是否有 package-lock.json 文件。</p><p>如果有，则检查 package-lock.json 和 package.json 中声明的依赖是否一致：</p><ul><li>一致，直接使用 package-lock.json 中的信息，从缓存或网络资源中加载依赖；</li><li>不一致，按照 npm 版本进行处理（不同 npm 版本处理会有不同，具体处理方式如图所示）。</li></ul><p>如果没有，则根据 package.json 递归构建依赖树。然后按照构建好的依赖树下载完整的依赖资源，在下载时就会检查是否存在相关资源缓存：</p><ul><li>存在，则将缓存内容解压到 node_modules 中；</li><li>否则就先从 npm 远程仓库下载包，校验包的完整性，并添加到缓存，同时解压到 node_modules。</li></ul><p>最后生成 package-lock.json。</p><p>构建依赖树时，当前依赖项目不管其是直接依赖还是子依赖的依赖，都应该按照扁平化原则，优先将其放置在 node_modules 根目录（最新版本 npm 规范）。在这个过程中，遇到相同模块就判断已放置在依赖树中的模块版本是否符合新模块的版本范围，如果符合则跳过；不符合则在当前模块的 node_modules 下放置该模块（最新版本 npm 规范）。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>图中标明的 npm 不同版本的不同处理情况，并学会从这种“历史问题”中总结 npm 使用的团队最佳实践：同一个项目团队，应该保证 npm 版本的一致。</p></div><h3 id="npm缓存机制" tabindex="-1">npm缓存机制 <a class="header-anchor" href="#npm缓存机制" aria-hidden="true">#</a></h3><p>对于一个依赖包的同一版本进行本地化缓存，是当代依赖包管理工具的一个常见设计。使用时要先执行以下命令：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm config get cache</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过这行命令可以得到配置缓存的根目录在C:\\Users\\用户名\\AppData\\Local\\npm-cache(mac在/Users/用户名/.npm)，我们 cd 进入C:\\Users\\用户名\\AppData\\Local\\npm-cache中可以发现_cacache文件。在 npm v5 版本之后，缓存数据均放在根目录中的_cacache文件夹中。</p><p><img src="`+i+`" alt=""></p><p>可以使用以下命令清除C:\\Users\\用户名\\AppData\\Local\\npm-cache_cacache 中的文件</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm cache clean --force</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在_cacache目录下，有三个目录：</p><ol><li>content-v2</li><li>index-v5</li><li>tmp</li></ol><p>其中 content-v2 里面基本都是一些二进制文件。为了使这些二进制文件可读，我们把二进制文件的扩展名改为 .tgz，然后进行解压，得到的结果其实就是我们的 npm 包资源。</p><p>而 index-v5 文件中，我们采用跟刚刚一样的操作就可以获得一些描述性的文件，事实上这些内容就是 content-v2 里文件的索引。</p><p>那么这些缓存是如何生成的呢?</p><p>当 npm install 执行时，通过<a href="https://www.npmjs.com/package/pacote" target="_blank" rel="noreferrer">pacote</a>把相应的包解压在对应的 node_modules 下面。npm 在下载依赖时，先下载到缓存当中，再解压到项目 node_modules 下。pacote 依赖<a href="https://github.com/npm/npm-registry-fetch#npm-registry-fetch" target="_blank" rel="noreferrer">npm-registry-fetch</a>来下载包，npm-registry-fetch 可以通过设置 cache 属性，在给定的路径下根据<a href="https://datatracker.ietf.org/doc/rfc7234/" target="_blank" rel="noreferrer">IETF RFC 7234</a>生成缓存数据。</p><p>然后在每次安装资源时，根据 package-lock.json 中存储的 integrity、version、name 信息生成一个唯一的 key，这个 key 能够对应到 index-v5 目录下的缓存记录。如果发现有缓存资源，就会找到 tar 包的 hash，根据 hash 再去找缓存的 tar 包，并再次通过pacote把对应的二进制文件解压到相应的项目 node_modules 下面，省去了网络下载资源的开销。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>这里提到的缓存策略是从 npm v5 版本开始的。在 npm v5 版本之前，每个缓存的模块在 ~/.npm 文件夹中以模块名的形式直接存储，储存结构是：{cache}/{name}/{version}。</p></div><h2 id="npm的使用技巧" tabindex="-1">npm的使用技巧 <a class="header-anchor" href="#npm的使用技巧" aria-hidden="true">#</a></h2><h3 id="配置-npm-init-默认字段来自定义-npm-init-的内容" tabindex="-1">配置 npm init 默认字段来自定义 npm init 的内容 <a class="header-anchor" href="#配置-npm-init-默认字段来自定义-npm-init-的内容" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm config set init</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">author</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">npm config set init</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">author</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">email </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test@gmail.com</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">npm config set init</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">author</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test.com</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">npm config set init</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">license </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MIT</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>更多信息见：<a href="https://docs.npmjs.com/cli/v9/commands/npm-config" target="_blank" rel="noreferrer">npm-config</a></p></blockquote><h3 id="利用-npm-link-高效率在本地调试以验证包的可用性" tabindex="-1">利用 npm link，高效率在本地调试以验证包的可用性 <a class="header-anchor" href="#利用-npm-link-高效率在本地调试以验证包的可用性" aria-hidden="true">#</a></h3><p>使用 npm link可以将模块链接到对应的业务项目中运行，从工作原理上总结，npm link 的本质就是软链接，它主要做了两件事：</p><ul><li>为目标 npm 模块创建软链接，将其链接到全局 node 模块安装路径 C:\\Users\\用户名\\AppData\\Roaming\\npm\\node_modules(mac在/usr/local/lib/node_modules/)中</li><li>为目标 npm 模块的可执行 bin 文件创建软链接，将其链接到全局 node 命令安装路径 /usr/local/bin/ 中。</li></ul><h3 id="npx-的作用" tabindex="-1">npx 的作用 <a class="header-anchor" href="#npx-的作用" aria-hidden="true">#</a></h3><p>npx 由 npm v5.2 版本引入，解决了 npm 的一些使用快速开发、调试，以及项目内使用全局模块的痛点。</p><p>在传统 npm 模式下，如果我们需要使用代码检测工具 ESLint，就要先通过 npm install 安装</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npm install eslint --save-dev</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后在项目根目录下执行：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">./node_modules/.bin/eslint --init</span></span>
<span class="line"><span style="color:#A6ACCD;">./node_modules/.bin/eslint yourfile.js</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>而使用 npx 就简单多了，你只需要下面 2 个操作步骤：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npx eslint --init</span></span>
<span class="line"><span style="color:#A6ACCD;">npx eslint yourfile.js</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这是因为它可以直接执行 node_modules/.bin 文件夹下的文件。在运行命令时，npx 可以自动去 node_modules/.bin 路径和环境变量 $PATH 里面检查命令是否存在，而不需要再在 package.json 中定义相关的 script。</p><p>npx 另一个更实用的好处是：npx 执行模块时会优先安装依赖，但是在安装执行后便删除此依赖，这就避免了全局安装模块带来的问题。 例如我们使用create-react-app创建工程。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">npx create-react-app cra-project</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>npx 会将 create-react-app 下载到一个临时目录，使用以后再删除</p><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-hidden="true">#</a></h2><ul><li><a href="https://juejin.cn/post/6844904022080667661" target="_blank" rel="noreferrer">前端工程化 - 剖析npm的包管理机制</a></li></ul>`,69),o=[r];function c(m,d,h,u,b,g){return p(),s("div",null,o)}const v=n(t,[["render",c]]);export{k as __pageData,v as default};
