import{_ as a,c as e,o as r,V as l}from"./chunks/framework.571c1c26.js";const b=JSON.parse('{"title":"脚手架","description":"","frontmatter":{},"headers":[],"relativePath":"project/tools/cli.md","filePath":"project/tools/cli.md","lastUpdated":1682771578000}'),n={name:"project/tools/cli.md"},s=l(`<h1 id="脚手架" tabindex="-1">脚手架 <a class="header-anchor" href="#脚手架" aria-label="Permalink to &quot;脚手架&quot;">​</a></h1><p>脚手架它的本质作用就是帮助开发者创建项目基础结构、提供项目规范和约定，使开发者可以方便地将注意力集中到业务开发本身。当我们开发相同类型项目时都会有一些相同的约定，包括：</p><ul><li>相同的文件组织结构</li><li>相同的开发范式</li><li>相同的模块依赖</li><li>相同的工具配置</li><li>相同的基础代码</li></ul><p>那么这样就会导致我们在搭建新项目时有大量的重复性工作要去做，脚手架工具就是为了解决这样问题的。我们可以通过脚手架工具去搭建特定项目类型的骨架，然后基于骨架去完成后续的开发工作，例如IDE(Android Studio)创建项目的过程就是一个脚手架的工作流程。</p><p>由于前端技术选型多样，没有统一的标准，所以它的脚手架一般不会放在IDE中，都是以独立的工具存在，而且相对复杂一些。</p><h2 id="常用的脚手架工具" tabindex="-1">常用的脚手架工具 <a class="header-anchor" href="#常用的脚手架工具" aria-label="Permalink to &quot;常用的脚手架工具&quot;">​</a></h2><p>市面上有很多的脚手架工具，但是大都是为了特定项目类型服务的。例如：</p><ul><li>React项目使用create-react-app</li><li>Vue项目使用vue-cli</li><li>Angular项目使用angular-cli</li></ul><p>这些工具都大同小异，根据开发者提供的信息自动的生成项目的特定文件、相关的配置等项目基础结构。</p><p>还有一类像Yeoman为代码的通用型脚手架工具，它可以根据一套模板生成对应的项目结构，这种类型的脚手架工具很灵活也很容易去扩展。</p><p>还有一类脚手架工具Plop，它们在项目开发的过程中创建特定类型的文件，例如创建一个组件或模块所需要的文件，这类模块一般是由特定的文件组成的，而且都有基本的代码结构，相比手动创建，脚手架有更为便捷的创建方式。</p><h2 id="yeoman" tabindex="-1">Yeoman <a class="header-anchor" href="#yeoman" aria-label="Permalink to &quot;Yeoman&quot;">​</a></h2><p>Yeoman的slogan是“THE WEB&#39;S SCAFFOLDING TOOL FOR MODERN WEBAPPS”——面向webapp的脚手架工具。Yeoman不能直接创建项目文件，它提供了一套完整的脚手架开发者API，使用这些API可以定制符合自己业务需求的任意脚手架方案。换句话说，Yeoman不封装任何方案，它是完全开放、高度可扩展的。</p><h2 id="脚手架的工作原理" tabindex="-1">脚手架的工作原理 <a class="header-anchor" href="#脚手架的工作原理" aria-label="Permalink to &quot;脚手架的工作原理&quot;">​</a></h2><p>大部分脚手架工具都很简单，在启动脚手架之后，会自动询问一些预设的问题，然后根据开发者回答的结果结合模板文件生成项目的结构。脚手架工具就是一个Node cli应用，那我们可以创建一个cli应用。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test-cli</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test-cli</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>创建完项目后可以新建一个cli.js，在文件中先声明一个文件头。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//cli.js</span></span>
<span class="line"><span style="color:#A6ACCD;">#</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">usr</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">bin</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">env node</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Node cli应用入口必须要有这样的文件头</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>脚手架的工作过程分为两点：1. 通过命令行交互询问用户问题，2. 根据用户回答的结果生成文件</p><p>命令行交互询问使用<a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noreferrer">inquirer</a>库来实现。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inquirer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>生成文件可以使用<a href="https://github.com/mde/ejs" target="_blank" rel="noreferrer">ejs</a>模板引擎来实现</p><h2 id="命令行工具原理和实现" tabindex="-1">命令行工具原理和实现 <a class="header-anchor" href="#命令行工具原理和实现" aria-label="Permalink to &quot;命令行工具原理和实现&quot;">​</a></h2><p>现代脚手架离不开命令行工具，命令行工具即 Command-line interfaces（CLIs） ，是编程领域的重要概念，也是我们开发中经常接触到的工具之一。</p><p>比如 Webpack、Babel、npm、Yarn 等都是典型的命令行。此外，流畅的命令行能够迅速启动一个脚手架，实现自动化和智能化流程。这一部分，我们就使用 Node.js 来开发一个命令行。</p><p>我们先来看几个开发命令行工具的关键依赖。</p><ul><li><a href="http://npm.im/inquirer" target="_blank" rel="noreferrer">inquirer</a>、<a href="http://npm.im/enquirer" target="_blank" rel="noreferrer">enquirer</a>、<a href="https://npm.im/prompts" target="_blank" rel="noreferrer">prompts</a>：可以处理复杂的用户输入，完成命令行输入交互。</li><li><a href="http://npm.im/chalk" target="_blank" rel="noreferrer">chalk</a>、<a href="https://npm.im/kleur" target="_blank" rel="noreferrer">kleur</a>：使终端可以输出彩色信息文案。</li><li><a href="http://npm.im/ora" target="_blank" rel="noreferrer">ora</a>：可以让命令行出现好看的 Spinners。</li><li><a href="http://npm.im/boxen" target="_blank" rel="noreferrer">boxen</a>：可以在命令行中画出 Boxes 区块。</li><li><a href="http://npm.im/listr" target="_blank" rel="noreferrer">listr</a>：可以在命令行中画出进度列表。</li><li><a href="http://npm.im/meow" target="_blank" rel="noreferrer">meow</a>、<a href="http://npm.im/arg" target="_blank" rel="noreferrer">arg</a>：可以进行基础的命令行参数解析。</li><li><a href="http://npm.im/commander" target="_blank" rel="noreferrer">commander</a>、<a href="https://www.npmjs.com/package/yargs" target="_blank" rel="noreferrer">yargs</a>：可以进行更加复杂的命令行参数解析。</li></ul><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903839246581773" target="_blank" rel="noreferrer">打造灵活可扩展的前端工程化框架</a></li><li><a href="https://juejin.cn/post/7049576737490862093" target="_blank" rel="noreferrer">leo：从工程化角度出发的前端脚手架</a></li><li><a href="https://zhuanlan.zhihu.com/p/311818609" target="_blank" rel="noreferrer">58金融前端脚手架的设计与实现</a></li></ul>`,29),t=[s];function p(o,i,c,h,m,d){return r(),e("div",null,t)}const f=a(n,[["render",p]]);export{b as __pageData,f as default};
