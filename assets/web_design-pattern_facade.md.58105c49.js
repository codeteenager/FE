import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.d64f6e3c.js";const p="/FE/web/91.png",e="/FE/web/90.png",u=JSON.parse('{"title":"外观模式","description":"","frontmatter":{},"headers":[],"relativePath":"web/design-pattern/facade.md","filePath":"web/design-pattern/facade.md","lastUpdated":1699178277000}'),o={name:"web/design-pattern/facade.md"},c=l('<h1 id="外观模式" tabindex="-1">外观模式 <a class="header-anchor" href="#外观模式" aria-label="Permalink to &quot;外观模式&quot;">​</a></h1><p>外观模式是为子系统中的一组接口提供了一个高层接口，使用者使用这个高层接口。</p><p>如果没有外观角色，每个客户端可能需要和多个子系统之间进行复杂的交互，系统的耦合度很大，简化示意图如下： <img src="'+p+'" alt=""> 而引入外观角色后，客户端只需直接与外观角色交互，客户端与子系统之间的原有复杂度由外观角色实现，从而降低系统耦合度，简化示意图如下： <img src="'+e+`" alt=""> 外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观角色进行，外观角色将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观角色打交道，而不需要与子系统内部的很多对象打交道。</p><p>该设计模式在框架、类库中比较少见，但是在业务中很常见。</p><h2 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h2><p>在前端中体现外观模式的有一个例子</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bindEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">elem</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">selector</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(fn </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        fn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> selector</span></span>
<span class="line"><span style="color:#E1E4E8;">        selector </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//调用</span></span>
<span class="line"><span style="color:#B392F0;">bindEvent</span><span style="color:#E1E4E8;">(elem,</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;#div1&#39;</span><span style="color:#E1E4E8;">,fn)</span></span>
<span class="line"><span style="color:#B392F0;">bindEvent</span><span style="color:#E1E4E8;">(elem,</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">,fn)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bindEvent</span><span style="color:#24292E;">(</span><span style="color:#E36209;">elem</span><span style="color:#24292E;">,</span><span style="color:#E36209;">type</span><span style="color:#24292E;">,</span><span style="color:#E36209;">selector</span><span style="color:#24292E;">,</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fn </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        fn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> selector</span></span>
<span class="line"><span style="color:#24292E;">        selector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//调用</span></span>
<span class="line"><span style="color:#6F42C1;">bindEvent</span><span style="color:#24292E;">(elem,</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;#div1&#39;</span><span style="color:#24292E;">,fn)</span></span>
<span class="line"><span style="color:#6F42C1;">bindEvent</span><span style="color:#24292E;">(elem,</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">,fn)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过一个高层接口，装好传入三个参数的方式和四个参数的方式。</p>`,8),t=[c];function r(E,i,y,d,b,m){return n(),a("div",null,t)}const _=s(o,[["render",r]]);export{u as __pageData,_ as default};
