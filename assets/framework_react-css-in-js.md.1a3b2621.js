import{_ as s,c as n,o as a,a as l}from"./app.d2d93c96.js";const p="/FE/framework/43.png",b=JSON.parse('{"title":"CSS-IN-JS","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么会有CSS-IN-JS","slug":"为什么会有css-in-js","link":"#为什么会有css-in-js","children":[]},{"level":2,"title":"CSS-IN-JS介绍","slug":"css-in-js介绍","link":"#css-in-js介绍","children":[]},{"level":2,"title":"Emotion库","slug":"emotion库","link":"#emotion库","children":[{"level":3,"title":"Emotion介绍","slug":"emotion介绍","link":"#emotion介绍","children":[]}]}],"relativePath":"framework/react-css-in-js.md","lastUpdated":1676047214000}'),e={name:"framework/react-css-in-js.md"},o=l(`<h1 id="css-in-js" tabindex="-1">CSS-IN-JS <a class="header-anchor" href="#css-in-js" aria-hidden="true">#</a></h1><p>什么是CSS-IN-JS呢？实际上它就是一种解决方案，在这种解决方案中，它提倡我们使用JavaScript代码去编写CSS代码，也就是它提倡将CSS代码写到JavaScript文件当中。</p><h2 id="为什么会有css-in-js" tabindex="-1">为什么会有CSS-IN-JS <a class="header-anchor" href="#为什么会有css-in-js" aria-hidden="true">#</a></h2><p>CSS-IN-JS 是 WEB 项⽬中将 CSS 代码捆绑在 JavaScript 代码中的解决⽅案。这种⽅案旨在解决 CSS 的局限性, 例如缺乏动态功能, 作⽤域和可移植性。具体原因如下：</p><p>在React中我们已经将html和js写在一起了，如果再将css写入其中，那么html、css和js都在一起了。这与我们的认知背道而驰了，我们认知中应该将html、css和js应该分别编写。这里的原因是为什么呢？其实就是开发方式的变化，以前我们开发前端项目中都是以页面为单位的，例如开发一个首页和列表页，这时候css文件是通过link标签引入html中，由于css没有作用域的概念，所以整个css代码都会被应用到html文件当中，这在当时是没有问题的。</p><p>而现在开发前端项目都是以组件为单位的，既然以组件为单位，我们希望css代码指定用于某一个组件，也就是说css代码只在组件范围内生效。这样的好处是组件与组件的css代码不会有冲突，但是要实现这样的功能就需要css要有作用域的概念，但是css没有这样的功能。如果使用CSS-IN-JS解决方案的话，就可以通过JavaScript作用域模拟CSS作用域，这样css代码就可以只用于组件内部了。这就是第一个原因。</p><p>第二个原因是增加了组件的独立性和可移植性，如果我们把CSS代码都写在不同的css文件中，当我们想把组件放到其他地方的时候，在移动的时候可能少复制css文件，如果采用CSS-IN-JS解决方案的话，我们把css写在js中，这样组件就是一个单独的文件，当我们想移动组件的时候直接移动组件本身即可，而不用担心其依赖问题。</p><p>第三个原因是css缺乏动态功能，不能根据条件来给某个元素添加什么样的样式，如果写在js中，可以使用js动态功能来为元素动态添加样式了。</p><h2 id="css-in-js介绍" tabindex="-1">CSS-IN-JS介绍 <a class="header-anchor" href="#css-in-js介绍" aria-hidden="true">#</a></h2><p>CSS-IN-JS ⽅案的优点：</p><ol><li>让 CSS 代码拥有独⽴的作⽤域, 阻⽌ CSS 代码泄露到组件外部, 防⽌样式冲突</li><li>让组件更具可移植性, 实现开箱即⽤, 轻松创建松耦合的应⽤程序</li><li>让组件更具可重⽤性, 只需编写⼀次即可, 可以在任何地⽅运⾏. 不仅可以在同⼀应⽤程序中重⽤组件, ⽽且可以在使⽤相同框架构建的其他应⽤程序中重⽤组件</li><li>让样式具有动态功能, 可以将复杂的逻辑应⽤于样式规则, 如果要创建需要动态功能的复杂UI, 它是理想的解决⽅案</li></ol><p>CSS-IN-JS ⽅案的缺点：</p><ol><li>为项⽬增加了额外的复杂性.</li><li>⾃动⽣成的选择器⼤⼤降低了代码的可读性</li></ol><h2 id="emotion库" tabindex="-1">Emotion库 <a class="header-anchor" href="#emotion库" aria-hidden="true">#</a></h2><h3 id="emotion介绍" tabindex="-1">Emotion介绍 <a class="header-anchor" href="#emotion介绍" aria-hidden="true">#</a></h3><p>Emotion 是⼀个旨在使⽤ JavaScript 编写 CSS 样式的库，要想使用这个库需要下载两个模块。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@emotion/core</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@emotion/styled</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>emotion提供了一个css属性，css属性的作用就是为元素添加样式</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">App</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">css</span><span style="color:#89DDFF;">={{</span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}}&gt;</span><span style="color:#A6ACCD;">App works</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> App</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>默认项目中并不知道如何解析css属性，所以我们需要使用babel配置让项目知道css如何被解析。</p><h4 id="css属性支持" tabindex="-1">css属性支持 <a class="header-anchor" href="#css属性支持" aria-hidden="true">#</a></h4><ol><li>JSX Pragma：在项目中添加jsx以及注释。通知 babel, 不再需要将 jsx 语法转换为 React.createElement ⽅法, ⽽是需要转换为 jsx ⽅法 <img src="`+p+`" alt=""></li></ol><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/** </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">jsx</span><span style="color:#676E95;font-style:italic;"> jsx */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">jsx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@emotion/core</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">App</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">css</span><span style="color:#89DDFF;">={{</span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}}&gt;</span><span style="color:#A6ACCD;">App works</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> App</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="2"><li>Babel Preset，通过babei预置方式实现</li></ol><ul><li>使用npm run eject 把react底层的配置弹射出来</li><li>安装@emotion/babel-preset-css-prop</li><li>在 package.json ⽂件中找到 babel 属性, 加⼊如下内容</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">presets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react-app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@emotion/babel-preset-css-prop</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="css方法" tabindex="-1">css方法 <a class="header-anchor" href="#css方法" aria-hidden="true">#</a></h4><p>css方法是与css属性配合在一起使用，通过调用css方法可以把css行内样式放到外面中编写。</p><ol><li>模板字符串函数，String Styles</li></ol><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">css</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@emotion/core</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> style</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C3E88D;">    width:100px;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">skyblue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">css</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">App works....</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>Object Styles</li></ol><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">css</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@emotion/core</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> style</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">css</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pink</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">App</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">css</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">App works....</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>推崇第一种方式。</p><h4 id="css属性优先级" tabindex="-1">css属性优先级 <a class="header-anchor" href="#css属性优先级" aria-hidden="true">#</a></h4><p>props 对象中的 css 属性优先级⾼于组件内部的 css 属性，在调⽤组件时可以在覆盖组件默认样式。</p><h4 id="styled-components-样式化组件" tabindex="-1">Styled Components 样式化组件 <a class="header-anchor" href="#styled-components-样式化组件" aria-hidden="true">#</a></h4><p>样式化组件就是⽤来构建⽤户界⾯的，是 emotion 库提供的另⼀种为元素添加样式的⽅式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> styled </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@emotion/styled</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>String Styles</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Button </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">styled</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">button</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    color:red</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>Object Styled</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Button </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> styled</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">button</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">green</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,42),t=[o];function c(r,i,D,y,F,C){return a(),n("div",null,t)}const A=s(e,[["render",c]]);export{b as __pageData,A as default};
