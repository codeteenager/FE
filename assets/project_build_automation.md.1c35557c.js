import{_ as s,c as n,o as a,a as p}from"./app.73463a62.js";const b=JSON.parse('{"title":"自动化构建","description":"","frontmatter":{},"headers":[],"relativePath":"project/build/automation.md","lastUpdated":1671902193000}'),l={name:"project/build/automation.md"},o=p(`<h1 id="自动化构建" tabindex="-1">自动化构建 <a class="header-anchor" href="#自动化构建" aria-hidden="true">#</a></h1><p>自动化构建时前端工程化的一个非常重要的组成部分，自动化就是通过机器代替手工工作，构建就是转换，将一个东西转换成另外一个东西，在开发行业的自动化构建就是将开发过程中编写的源代码自动化的转换成生成环境中可以运行的代码或程序，我们一般把这个转化的过程称为自动化构建工作流。它的作用就是让我们尽可能脱离运行环境兼容带来的问题，在开发阶段使用提高效率的语法、规范和标准。最典型的应用就是我们在开发网页应用程序时使用ECMAScript最新标准来提高编码效率和质量。利用sass增强css的可编程性，利用模板引擎抽象页面中重复的HTML。这些用法大都不被浏览器直接支持。这种情况下自动化构建工具则派上用场，通过自动化构建的方式，构建转换那些不被支持的特性，这样就能在开发过程中提高编码效率。</p><p>如何实现自动化构建呢？使用Npm Scripts是实现自动化构建工作流的最简方式。例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">:</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sass scss/main.scss css/style.css --watch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">serve</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">browser-sync</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">run-p build serve</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">:</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">browser-sync</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^2.26.7</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">sass</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^1.22.10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">npm-run-all</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^4.1.5</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>安装<a href="https://browsersync.bootcss.com/" target="_blank" rel="noreferrer">browser-sync</a>作为本地服务运行页面，调用build命令使用sass编译成css并使用--watch来监听文件修改，调用start使用npm-run-all并行运行命令，这就形成一个简单的自动化构建工作流。</p><p>Npm Scripts能做一些简单的自动化构建任务，但是对于一些复杂的构建过程，Npm Scripts就显得相对吃力。这时我们就需要相对专业的构建工具，这里我们就介绍一些市面上的自动化构建工具。目前市面上使用最多的分别是：</p><ul><li>Grunt</li><li>Gulp</li><li>FIS</li></ul><p>可能有人会问webpack去哪了，严格意义上来说，webpack是一个模块化的打包工具，所以说不在自动化构建工具范围内。这些工具都可以帮助解决重复、无聊的工作，实现自动化，用法上都大体相同，都是先通过一些简单代码组织插件的使用，然后就可以使用这些工具去执行重复的工作了。</p><p><a href="https://www.gruntjs.net/" target="_blank" rel="noreferrer">Grunt</a>可以说是最早的前端构建系统，它的插件生态非常完善，按照官方的话来说Grunt插件可以帮助你去完成任何想要做的事情，但是由于它的工作过程是基于临时文件实现的，所以说它的构建速度相对较慢。例如我们项目中使用它去完成sass文件的构建，它会去先对sass文件进行编译操作，再去自动添加私有属性的前缀，最后再去压缩代码，这样在每一步过程中Grunt都会有磁盘读写操作，比如在sass编译完成后，就会将结果写入一个临时文件，然后下一步插件回去读取临时文件再执行下一步。这样处理的环节越多，文件读写的次数越多。对于超大型项目来说，项目文件越多，构建处理的速度就会越慢。而<a href="https://www.gulpjs.com.cn/" target="_blank" rel="noreferrer">Gulp</a>很好解决了Grunt构建速度慢的问题。因为它是基于内存去实现的，也就是说他对文件处理的环节都是在内存中实现的，相对磁盘读写就快了很多。另外Gulp支持同时执行多个任务，效率自然大大提高，而且它的使用方式相对于Grunt更加直观易懂，它的生态也同样非常完善，所以说它后来居上非常受欢迎，现在应该是前端最流行的构建系统。</p><p><a href="http://fis.baidu.com/" target="_blank" rel="noreferrer">FIS</a>是百度前端团队推出的构建系统，最早是在其内部使用，后来开源过后在国内快速流行，相对于前两个构建系统这种微内核的特点，FIS更像是一种捆绑套餐，它把我们在项目中的需求尽可能集成在内部，例如在FIS中很容易的处理资源加载、模块化开发、代码部署甚至是性能优化，正是因为这种大而全，在国内很快就流行开。</p><p>总体来说，如果你是初学者的话FIS更适合你，如果你要求灵活多变的话Gulp、Grunt应该是更好的选择。</p>`,11),e=[o];function t(r,c,F,D,y,u){return a(),n("div",null,e)}const d=s(l,[["render",t]]);export{b as __pageData,d as default};
