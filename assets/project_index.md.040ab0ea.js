import{_ as l,c as i,o as e,a}from"./app.b1b60815.js";const _=JSON.parse('{"title":"前端工程化","description":"","frontmatter":{},"headers":[{"level":2,"title":"前端发展历史","slug":"前端发展历史","link":"#前端发展历史","children":[]},{"level":2,"title":"前端开发模式进化过程","slug":"前端开发模式进化过程","link":"#前端开发模式进化过程","children":[]},{"level":2,"title":"企业的应用场景","slug":"企业的应用场景","link":"#企业的应用场景","children":[]},{"level":2,"title":"企业前端项目面临的真实问题","slug":"企业前端项目面临的真实问题","link":"#企业前端项目面临的真实问题","children":[]},{"level":2,"title":"企业前端工程问题解法","slug":"企业前端工程问题解法","link":"#企业前端工程问题解法","children":[]},{"level":2,"title":"企业前端工程化的应用场景","slug":"企业前端工程化的应用场景","link":"#企业前端工程化的应用场景","children":[]}],"relativePath":"project/index.md","lastUpdated":1670593134000}'),d={name:"project/index.md"},t=a('<h1 id="前端工程化" tabindex="-1">前端工程化 <a class="header-anchor" href="#前端工程化" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">软件工程</p><p>将工程方法系统化地应用到软件开发中</p></div><p>前端工程化是使用软件工程的技术和方法来进行前端的开发流程、技术、工具、经验等规范化、标准化，其主要目的为了提高效率和降低成本，即提高开发过程中的开发效率，减少不必要的重复工作时间，而前端工程本质上是软件工程的一种，前端工程是指将工程方法系统化地应用到前端开发中，以系统、严谨、可量化的方法开发、运营、维护前端应用程序，目的是降本提效。</p><p>在实际开发的过程中，一个完整的迭代周期需要依次经过开发、测试、部署、发布这几个环节，并且在产品上线之后，我们还需要对产品进行稳定性保障也就是实时的监控和报警系统，避免产品宕机。那么，工程化需要解决的问题就是如何在整个的迭代周期中降本提效。</p><p>前端工程化可以分成四个块来说，分别为：</p><ol><li><p>模块化：将一个文件拆分成多个相互依赖的文件，最后进行统一的打包和加载，这样能够很好的保证高效的多人协作。其中包含</p><ul><li>JS 模块化：CommonJS、AMD、CMD 以及 ES6 Module。</li><li>CSS 模块化：Sass、Less、Stylus、BEM、CSS Modules 等。其中预处理器和 BEM 都会有的一个问题就是样式覆盖。而 CSS Modules 则是通过 JS 来管理依赖，最大化的结合了 JS 模块化和 CSS 生态，比如 Vue 中的 style scoped。</li><li>资源模块化：任何资源都能以模块的形式进行加载，目前大部分项目中的文件、CSS、图片等都能直接通过 JS 做统一的依赖关系处理。</li></ul></li><li><p>组件化：不同于模块化，模块化是对文件、对代码和资源拆分，而组件化则是对 UI 层面的拆分。</p><ul><li>通常，我们会需要对页面进行拆分，将其拆分成一个一个的零件，然后分别去实现这一个个零件，最后再进行组装。</li><li>在我们的实际业务开发中，对于组件的拆分我们需要做不同程度的考量，其中主要包括细粒度和通用性这两块的考虑。</li><li>对于业务组件，你更多需要考量的是针对你负责业务线的一个适用度，即你设计的业务组件是否成为你当前业务的 “通用” 组件。</li></ul></li><li><p>规范化：正所谓无规矩不成方圆，一些好的规范则能很好的帮助我们对项目进行良好的开发管理。规范化指的是我们在工程开发初期以及开发期间制定的系列规范，其中又包含了：</p><ul><li>项目目录结构</li><li>文档规范化</li><li>接口规范化</li><li>编码规范：对于编码这块的约束，一般我们都会采用一些强制措施，比如 ESLint、StyleLint 等。</li><li>联调规范</li><li>文件命名规范</li><li>样式管理规范：目前流行的样式管理有 BEM、Sass、Less、Stylus、CSS Modules 等方式。</li><li>git flow 工作流：其中包含分支命名规范、代码合并规范等。</li><li>定期 code review</li><li>… 等等</li></ul></li><li><p>自动化：从最早先的 grunt、gulp 等，再到目前的 webpack、parcel。这些自动化工具在自动化合并、构建、打包都能为我们节省很多工作。而这些前端自动化其中的一部分，前端自动化还包含了持续集成、自动化测试等方方面面。</p></li></ol><h2 id="前端发展历史" tabindex="-1">前端发展历史 <a class="header-anchor" href="#前端发展历史" aria-hidden="true">#</a></h2><ol><li>1995年，Brendan Eich发明Javascript</li><li>2005年，Ajax(Asynchronous Javascript And XML)广泛应用</li><li>2008年，V8引擎发布,意味着js可以脱离浏览器使用</li><li>2009年，Node.js发布，标志了前端工程化进入飞跃的时代</li><li>2010年，Npm 0.1版本发布标志的模块化的时代到来</li><li>2013年，Webpack 1.0版本发布，标志着现在前端开发模式正式形成。</li><li>2013年，React 1.0版本发布</li><li>2014年，Vue1.0版本发布，标志着前端MVVM时代到来</li></ol><h2 id="前端开发模式进化过程" tabindex="-1">前端开发模式进化过程 <a class="header-anchor" href="#前端开发模式进化过程" aria-hidden="true">#</a></h2><ol><li>前后端混合(1995~2005)：服务端渲染，javascript仅实现交互</li><li>前后端分离(2005~2013)：借助ajax实现前后端分离、SPA等新模式</li><li>模块化开发(2013~2014)：npm管理模块、Webpack编译打包资源</li><li>模块化+MVVM(2014~至今)：基于React或Vue开发，不再开发html，开发html成为历史</li></ol><h2 id="企业的应用场景" tabindex="-1">企业的应用场景 <a class="header-anchor" href="#企业的应用场景" aria-hidden="true">#</a></h2><ul><li>前端工程化贯穿整个研发流程，解决<code>研发流程</code>中的问题</li><li>工程化的核心目标是三点：<code>效率</code>、<code>规范</code>、<code>性能</code></li><li>只有了解前端研发流程的痛点，才能进行<code>诊断</code>和<code>优化</code></li><li>需要站在研发场景的角度去思考<code>研发流程痛点</code></li></ul><h2 id="企业前端项目面临的真实问题" tabindex="-1">企业前端项目面临的真实问题 <a class="header-anchor" href="#企业前端项目面临的真实问题" aria-hidden="true">#</a></h2><ul><li>项目量级增加：由几千行代码升级到几万行代码</li><li>项目数量扩大：由几个项目扩大到几千个项目</li><li>项目复杂度高：由Web项目扩展到H5/PC/小程序/Node服务端/脚手架</li><li>团队人数增加：由几个前端扩展到几百个前端</li></ul><h2 id="企业前端工程问题解法" tabindex="-1">企业前端工程问题解法 <a class="header-anchor" href="#企业前端工程问题解法" aria-hidden="true">#</a></h2><ul><li>项目量级增加：通过采用模块化(CommonJS和ESM)的方式来将js拆分成一个一个的功能，达到多个项目复用，通过npm和webpack辅助实现。</li><li>项目数量扩大：在大厂中有几千个项目，需要通过研发平台和前端研发脚手架来创建、管理项目。</li><li>项目复杂度高：在大厂中不同的团队会用到vue、react、小程序等技术栈来开发，团队可能针对不同的技术栈开发不同的脚手架，导致重复造轮子，这样我们要通过工程脚手架(统一解决不同技术栈的工程差异)来解决，不管是vue或是react项目，在工程构建流程方面是统一的。</li><li>团队人数增长：通过研发平台和研发脚手架来帮助团队开发人员进行协同工作。</li></ul><h2 id="企业前端工程化的应用场景" tabindex="-1">企业前端工程化的应用场景 <a class="header-anchor" href="#企业前端工程化的应用场景" aria-hidden="true">#</a></h2><ul><li>工程脚手架：使用工程脚手架达到vue、react等工程的统一构建</li><li>研发脚手架：解决对项目的创建、发布以及管理项目</li><li>项目性能优化：对于项目的构建速度进行优化</li></ul>',18),c=[t];function r(s,o,n,h,u,p){return e(),i("div",null,c)}const m=l(d,[["render",r]]);export{_ as __pageData,m as default};
