import{_ as e,c as a,o as i,N as r}from"./app.e60ec301.js";import"./chunks/theme.3045e04b.js";const l="/FE/project/84.png",m=JSON.parse('{"title":"插件化","description":"","frontmatter":{},"headers":[{"level":2,"title":"插件架构","slug":"插件架构","link":"#插件架构","children":[{"level":3,"title":"插件三要素","slug":"插件三要素","link":"#插件三要素","children":[]},{"level":3,"title":"插件核心","slug":"插件核心","link":"#插件核心","children":[]},{"level":3,"title":"插件架构的好处","slug":"插件架构的好处","link":"#插件架构的好处","children":[]},{"level":3,"title":"插件与组件与库的区别？","slug":"插件与组件与库的区别","link":"#插件与组件与库的区别","children":[]}]},{"level":2,"title":"微内核","slug":"微内核","link":"#微内核","children":[]},{"level":2,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"relativePath":"project/plugin.md","lastUpdated":1678554326000}'),t={name:"project/plugin.md"},n=r('<h1 id="插件化" tabindex="-1">插件化 <a class="header-anchor" href="#插件化" aria-hidden="true">#</a></h1><p>大家在进行前端开发过程中，可能都会养成一个习惯，当我们面对某一个特定问题，需求解决方案的时候，都会在社区中找好用的插件。如果能够找到匹配的插件，原本两天的工作量，可能半个小时就搞定了。</p><p>不管是以前撑起前端大半江山的JQuery，还是现在提升前端开发体验的构建工具例如Webpack，都采用了插件架构。</p><h2 id="插件架构" tabindex="-1">插件架构 <a class="header-anchor" href="#插件架构" aria-hidden="true">#</a></h2><p>插件架构宏观上来讲就是一种框架能够在确定的点上执行外部的代码，而不需要提前知道这部分代码的细节。</p><p>它既可以很简单，也可以很复杂。我们可以编写webpack插件，也可以开发vscode的插件，其基本架构是相似的。</p><p>开发插件需要遵循一些约定，就像网络传输需要协议。它们必须能够被主进程以某种方式获取并使用。通常最初的开发者会发布一些接口或开发套件，允许其他的开发者对原系统开发插件，提供新的能力。</p><p>插件架构师开放封闭原则(OCP)的一种开发原则的体现，表明系统对拓展开放，对修改封闭。插件架构解决了不需要修改核心系统代码而可以对系统增加一些额外的功能特性，只需要一些额外的代码。插件可以单独开发，单独测试。</p><h3 id="插件三要素" tabindex="-1">插件三要素 <a class="header-anchor" href="#插件三要素" aria-hidden="true">#</a></h3><ul><li>pluginCore：插件内核，提供插件运行时，管理插件的加载、运行、卸载等生命周期(类比浏览器)</li><li>pluginAPI：插件运行时需要的基础接口(类比浏览器例子，相当于window)</li><li>plugin：一系列特定功能的独立模块(类比浏览器例子，相当于不同的网页)</li></ul><h3 id="插件核心" tabindex="-1">插件核心 <a class="header-anchor" href="#插件核心" aria-hidden="true">#</a></h3><p>插件体系主要分为插件管理、插件连接、插件通信。插件管理中核心系统需要知道哪些插件可以用，注册到哪里，注册顺序等。插件连接是插件的实现规范以及与核心系统的连接规范。插件通信是核心系统提供插件的通讯机制。 <img src="'+l+'" alt=""></p><h3 id="插件架构的好处" tabindex="-1">插件架构的好处 <a class="header-anchor" href="#插件架构的好处" aria-hidden="true">#</a></h3><p>插件机制可以保证在系统提供的能力范围内参与系统内部定制化的改造，这为第三方开发提供了更便利的条件，而且这种机制的存在可以激发更多的想法，促进整个生态的发展。采用插件机制有开放生态、拓展性强、无入侵定制化、规则指定等好处。</p><h3 id="插件与组件与库的区别" tabindex="-1">插件与组件与库的区别？ <a class="header-anchor" href="#插件与组件与库的区别" aria-hidden="true">#</a></h3><p>组件是调用者只需关注输入和输出，总思想就是分而治之、重复利用、低耦合。组件解决资源整合问题、增强功能促进开发效率，提高可维护性，便于协同开发。</p><p>插件是参与程序内部运行环节的一段或多段代码集合。即plugin遵循一定规范写出来方便程序展示效果，拥有特定功能且方便调用。</p><p>库是为解决某些特定需求的程序功能集合。即library，如JQuery，常用于方便dom操作、解决浏览器兼容等问题。</p><h2 id="微内核" tabindex="-1">微内核 <a class="header-anchor" href="#微内核" aria-hidden="true">#</a></h2><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-hidden="true">#</a></h2><ul><li><a href="https://mp.weixin.qq.com/s/ZYcmMvk8ccYIsNDEkX1W0Q" target="_blank" rel="noreferrer">前端插件机制剖析及业界案例分析</a></li></ul>',21),d=[n];function h(c,s,p,o,u,_){return i(),a("div",null,d)}const k=e(t,[["render",h]]);export{m as __pageData,k as default};
