import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.d64f6e3c.js";const d=JSON.parse('{"title":"Web Components","description":"","frontmatter":{},"headers":[],"relativePath":"web/foundation/web-components.md","filePath":"web/foundation/web-components.md","lastUpdated":1688837168000}'),p={name:"web/foundation/web-components.md"},o=l(`<h1 id="web-components" tabindex="-1">Web Components <a class="header-anchor" href="#web-components" aria-label="Permalink to &quot;Web Components&quot;">​</a></h1><p>如果问你开发项目的时候，为什么不手写原生JS，而是用现如今非常流行的前端框架呢？原因肯定非常多，比如良好的生态、数据驱动视图、模块化、组件化等等，Web Components就是为了解决组件化这个问题而诞生的，它是浏览器原生支持的组件化，不依赖于任何库或框架以及各种编辑打包工具，便可以在浏览器中运行。组件化的好处相必不便多说，大家都用过vue、react这类知名框架，懂得都懂。但是这类框架的组件化不是真正的组件化，虽然写代码时写得是组件化的代码，但是编译过后就不再是组件化了。</p><p>比如我们用Vue + Element UI开发了一套后台管理系统，Element UI提供的组件都是以el开头的，像<code>&lt;el-button&gt;</code>，但是编译过后显示在页面上就不是el-button标签了，这有点类似于CSS预处理器，那些像Saas、Less在开发阶段定义的变量其实并不是真正的变量，而是伪变量，在编译过后就没有变量这个概念了，所以很难跟JS进行通信。同理，框架的组件化也都不是真正的组件化，各家都是各家的组件化标准，这就导致了生态的分裂。而且框架的组件化都是要靠编译才能实现的。并且非常依赖于这个框架，是一种共生的关系。就像我们写xxx.vue是vue的组件，它没办法在浏览器中运行。</p><p>通常来说浏览器厂商会吸收一些流行的前端框架的可取之处，然后推动其成为标准，并在浏览器中原生实现其功能。Web Components与现在非常流行的mvvm框架是一种可以共存的关系，而不是一种互斥的关系。像saas变量和css变量，两者可以完美的互补。</p><p>Web Components不是单一的技术，而是由4门技术组合来的。这四门技术分别是HTML Imports、HTML templates、Custom Elements、Shadow DOM。</p><h2 id="web-components-的历史" tabindex="-1">Web Components 的历史 <a class="header-anchor" href="#web-components-的历史" aria-label="Permalink to &quot;Web Components 的历史&quot;">​</a></h2><p>其实 Web Components 并不是近几年才出现的规范。</p><p>最早在 2011 年的时候 Google 就推出了 Web Components 的概念，也算是前端发展的早期了。那时候前端还处于百废待兴的一个状态，前端甚至都没有「组件化」的概念，但是就是这个时候 Google 就已经凭明锐的嗅觉察觉到「组件化」是未来发展的趋势，所以提出了 Web Components 。不过在最开始时 Google 也只是提出了这样一个概念，并没有去实现它，所以并没有出现太大的浪花。</p><blockquote><p>2011 年 React 框架也诞生了。</p></blockquote><p>到了 2013 年，Google 浏览器和 Opera 浏览器联合推出 Web Components 规范的 v0 版本。这也算是 Web Components 最早的版本了。</p><blockquote><p>2013 年 React 框架开源。 2014 年 Vue 框架诞生，这里为什么要提到 Vue 框架了？因为 Vue 作者在创建 Vue 的时候大量参考了 Web Components 的语法。</p></blockquote><p>在 2016 年 2 月， Shadow DOM 和 Custom Element 被并入 DOM 标准规范里面，而不再作为独立的规范存在。</p><p>在 2017 年 Google I/O 上，Polymer 框架发布2.0 版本，而这次升级的最主要意义就是将 Shadow Dom 和 Custom Elements 升级到 v1 版本，从而获得更多浏览器支持下一 代 Web Components 规范。</p><p>然后在 2018 年，Shadow DOM 和 Custom Element v2 在 Chrome、Safari、三星浏览器上已经支持，还被 Firefox 列为要支持的特性。</p><p>至此所有浏览器都实现了web components，不过终究来的太晚了，三大框架(Vue、React、Angular)早已瓜分市场，形成了三足鼎立的局面。不过随着时间推移，三大框架可能会使用web components来实现自己的组件化系统，而vue官方的脚手架vue-cli早已实现了将vue组件转换成web components的功能，而且一些组件库为了跨框架运行也是使用web components来实现。比如taro3中的基础组件为了能够让vue、react都能使用，特意使用web components来实现的基础组件。</p><p>所以 Web Components 并不是一个新的概念，它已经存在很长时间了，只是可能还没有全面的进入研发者的视野。</p><h2 id="html-imports" tabindex="-1">HTML Imports <a class="header-anchor" href="#html-imports" aria-label="Permalink to &quot;HTML Imports&quot;">​</a></h2><p>HTML Imports 已经被废弃，如果想正常使用 HTML Imports 代码查看效果，可以安装低版本浏览器。</p><p>现在JS模块化有ES Module、require()，CSS模块化有CSS Module、@import，从来没听过html有模块化的，也正是html imports为html带来了模块化的特性，导致了很多人觉得它很好用，但是被废弃了怎么办呢？现在有一个提案叫<a href="https://github.com/WICG/webcomponents/blob/gh-pages/proposals/html-modules-proposal.md" target="_blank" rel="noreferrer">HTML Modules</a>，就是用来代替HTML imports。</p><p>新的 HTML Modules 提案能够直接将 HTML 文件*作为 ECMAScript Module 引入：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">import { libDom, libHelper } from &#39;./my-lib.html&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">import { libDom, libHelper } from &#39;./my-lib.html&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>而在 HTML Module 文件类似于一个普通的局部 HTML：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;blogPost&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt; Some Amazing Content &lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> blogPost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#blogPost&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { blogPost }</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;blogPost&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt; Some Amazing Content &lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> blogPost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#blogPost&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { blogPost }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>当然也有一些细节需要注意：</p><ul><li>HTML 自身被解析为 DocumentFragment，并作为 default export（可覆盖）</li><li>文件中所有的 Inline Script 都是 Module*（不论是否指定 type），而非 Script</li><li>Inline Script 可通过 i<wbr>mport.meta.document 访问当前的 DocumentFragment</li></ul><h2 id="custom-elements" tabindex="-1">Custom Elements <a class="header-anchor" href="#custom-elements" aria-label="Permalink to &quot;Custom Elements&quot;">​</a></h2><p>从名字来看，就知道 Custom Elements 是用来创建自定义 HTML 标签。Cumtom elements 这个概念对于写过 Vue、React、Angular 的开发者而言应该非常的熟悉，在框架中通过组件的形式，使用自己定义的标签。</p><p>Web Component使用 CustomElementRegistry.define方法用来注册一个 custom element。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(name, constructor, options);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">customElements.</span><span style="color:#6F42C1;">define</span><span style="color:#24292E;">(name, constructor, options);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>name：表示创建的元素的名称，不能是单个单词，必须要有短横线</li><li>constructor：定义元素行为的类</li><li>options（可选）：配置对象</li></ul><p>基于以上定义，我们可以实现一个自定义标签。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;my-custom&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;我是一个自定义标签。&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">my-custom</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">my-custom</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyCustom</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HTMLElement</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-custom&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> templateContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> template.content;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">shadowRoot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">attachShadow</span><span style="color:#E1E4E8;">({mode: </span><span style="color:#9ECBFF;">&#39;open&#39;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(templateContent.</span><span style="color:#B392F0;">cloneNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-custom&#39;</span><span style="color:#E1E4E8;">, MyCustom);</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;my-custom&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;我是一个自定义标签。&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">my-custom</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">my-custom</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyCustom</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElement</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;my-custom&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> templateContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> template.content;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">shadowRoot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">attachShadow</span><span style="color:#24292E;">({mode: </span><span style="color:#032F62;">&#39;open&#39;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(templateContent.</span><span style="color:#6F42C1;">cloneNode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    customElements.</span><span style="color:#6F42C1;">define</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;my-custom&#39;</span><span style="color:#24292E;">, MyCustom);</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><p>在组件化的开发过程中有一个无论如何都绕不开的话题就是生命周期，生命周期对于开发者而言十分重要，我们在初始化阶段设置监听器，在组件挂载阶段设置dom元素，在组件更新阶段发送ajax请求，组件卸载的时候做取消定时器的操作。web components生命周期如下：</p><ul><li>connectedCallback：当 custom element 首次被插入文档 DOM 时，被调用。</li><li>disconnectedCallback：当 custom element 从文档 DOM 中删除时，被调用。</li><li>adoptedCallback：当 custom element 被移动到新的文档时，被调用。</li><li>attributeChangedCallback: 当 custom element 增加、删除、修改自身属性时，被调用。</li></ul>`,35),e=[o];function t(c,r,E,y,i,m){return n(),a("div",null,e)}const b=s(p,[["render",t]]);export{d as __pageData,b as default};
