import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.63c771e2.js";const p="/FE/web/62.png",o="/FE/web/58.png",e="/FE/web/59.png",F=JSON.parse('{"title":"NestJS","description":"","frontmatter":{},"headers":[],"relativePath":"web/node/nest.md","filePath":"web/node/nest.md","lastUpdated":1683990612000}'),r={name:"web/node/nest.md"},t=l('<h1 id="nestjs" tabindex="-1">NestJS <a class="header-anchor" href="#nestjs" aria-label="Permalink to &quot;NestJS&quot;">​</a></h1><p>Nest提供了一个开箱即用的应用程序架构，允许开发人员和团队创建高度可测试、可扩展、松散耦合且易于维护的应用程序。</p><p><img src="'+p+'" alt=""></p><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li>从技术层面上，复杂项目(长期+多子系统)推荐使用</li><li>从人力资源层面上，如果中级前端的人数&gt;后端人数可以考虑</li><li>从使用成本上说，长期非常香</li></ul><h3 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h3><ul><li>代码架构合理，装饰器语法写起来舒服，但是概念比较多</li><li>TS原生支持，开发体验好，项目的代码质量高</li><li>对于代码人员的要求更高，上手有难度(相比Egg.js/Express/koa)</li></ul><h3 id="与其他node框架相比" tabindex="-1">与其他Node框架相比 <a class="header-anchor" href="#与其他node框架相比" aria-label="Permalink to &quot;与其他Node框架相比&quot;">​</a></h3><ul><li>Koa &amp; Express本身只实现了HTTP服务，中间逻辑需自己实现</li><li>Egg.js有合理的逻辑分层，但TS支持不好，文档欠缺</li><li>Nest.js生态最好，使用TS+注解的方式更便捷</li></ul><h3 id="资源合集" tabindex="-1">资源合集 <a class="header-anchor" href="#资源合集" aria-label="Permalink to &quot;资源合集&quot;">​</a></h3><ul><li>官方示例：<a href="https://github.com/nestjs/nest/tree/master/sample" target="_blank" rel="noreferrer">https://github.com/nestjs/nest/tree/master/sample</a></li><li>Awesome：<a href="https://github.com/nestjs/awesome-nestjs" target="_blank" rel="noreferrer">https://github.com/nestjs/awesome-nestjs</a></li><li>nestjs中文网：<a href="https://docs.nestjs.cn/9/introduction" target="_blank" rel="noreferrer">https://docs.nestjs.cn/9/introduction</a></li></ul><h2 id="编程思想" tabindex="-1">编程思想 <a class="header-anchor" href="#编程思想" aria-label="Permalink to &quot;编程思想&quot;">​</a></h2><h3 id="fp" tabindex="-1">FP <a class="header-anchor" href="#fp" aria-label="Permalink to &quot;FP&quot;">​</a></h3><p>FP(Functional Programming)函数式编程，它是确定的数据输入、输出，没有副作用，相对独立。它引用透明，对IDE友好，易于理解。</p><h3 id="oop" tabindex="-1">OOP <a class="header-anchor" href="#oop" aria-label="Permalink to &quot;OOP&quot;">​</a></h3><p>OOP(Object Oriented Programming)面向对象式编程，它是抽象现实生活中事物的特征，对于理解友好。它具有封装性(高内聚、低耦合)、继承性、多态性。</p><h3 id="aop" tabindex="-1">AOP <a class="header-anchor" href="#aop" aria-label="Permalink to &quot;AOP&quot;">​</a></h3><p>AOP(Aspect Oriented Programming)面向切面编程，能在不破坏封装功能的前提下，额外增加功能。</p><p>它的特点有：</p><ul><li>扩展功能方便，不影响业务之间的逻辑</li><li>逻辑集中管理</li><li>更利于代码复用</li></ul><p>nestjs中的管道、过滤器、中间件等都是面向切面编程的实现。</p><h3 id="ioc和di" tabindex="-1">IOC和DI <a class="header-anchor" href="#ioc和di" aria-label="Permalink to &quot;IOC和DI&quot;">​</a></h3><p>IOC(Inversion Of Control)控制反转是一种面向对象编程中的一种设计原则，用来减低计算机代码之间的耦合度。其基本思想是：借助于第三方实现具有依赖关系的对象之间的解耦。</p><p>DI(Dependency Injection)依赖注入是一种用于实现IOC的设计模式，它允许在类外创建依赖对象，并通过不同的方式将这些对象提供给类。</p><h2 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h2><ul><li>Controllers(控制器)：负责处理请求、返回响应</li><li>Services(服务)：负责提供方法和操作，只包含业务逻辑</li><li>Modules(模块)：组合所有的逻辑代码</li><li>Pipes(管道)：核验请求的数据</li><li>Filters(过滤器)：处理请求时的错误</li><li>Guards(守卫)：鉴权与认证相关</li><li>Interceptors(拦截器)：给请求与响应加入额外的逻辑</li><li>Repositories(存储库)：负责访问数据库中的数据</li></ul><p>Nestjs中使用模块Module来组织应用程序，使用@Module装饰器来描述模块。模块中有4大属性：imports、providers、controllers、exports。</p><p>Nestjs将模块分为四大块：功能模块、共享模块、全局模块、动态模块。功能模块与共享模块是一回事，只是叫法不一样。全局模块通常应用在配置、数据库连接、日志上。动态模块是在使用到模块的时候才初始化。</p><h3 id="mvc" tabindex="-1">MVC <a class="header-anchor" href="#mvc" aria-label="Permalink to &quot;MVC&quot;">​</a></h3><p>Nestjs可以通过模板库实现View层，常见：pug、hus、ejs等，Nestjs默认集成express作为web服务器，可以换成koa/fastify。Controller响应前端的请求，Model是对应的具体的数据库逻辑。</p><p>DTO(Data Transfer Object)数据传输对象，例如前端请求到后端这是一个传输的过程，后端访问数据库又是一个传输的过程。Nestjs中的DTO约定了数据字段、属性，方便数据校验。</p><p>DAO(Data Access Object)数据访问对象，它是一层逻辑：包含实体类、数据库操作(CURD)、数据校验、错误处理等，Nestjs做了一层更高级的封装，通过ORM库与各种类型数据库对接，而这些ORM库就是DAO层。</p><h3 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h3><p><img src="'+o+'" alt=""></p><h3 id="接口服务" tabindex="-1">接口服务 <a class="header-anchor" href="#接口服务" aria-label="Permalink to &quot;接口服务&quot;">​</a></h3><p><img src="'+e+`" alt=""></p><h2 id="官方cli" tabindex="-1">官方CLI <a class="header-anchor" href="#官方cli" aria-label="Permalink to &quot;官方CLI&quot;">​</a></h2><p>官方的CLI是一个命令行界面工具，以帮助您初始化、开发和维护Nest应用程序。它以多种方式提供帮助，包括搭建项目、以开发模式为其提供服务，以及为生产分发构建和打包应用程序。它体现了最佳实践的架构模式，以构建良好的应用程序。</p><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>首先全局安装nest cli脚手架，然后通过脚手架来创建项目</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@nestjs/cli</span></span>
<span class="line"><span style="color:#B392F0;">nest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">project-name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@nestjs/cli</span></span>
<span class="line"><span style="color:#6F42C1;">nest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">project-name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="工程目录" tabindex="-1">工程目录 <a class="header-anchor" href="#工程目录" aria-label="Permalink to &quot;工程目录&quot;">​</a></h3><p>为了去理解Python的语言设计之美，其实更要理解这样的一句话&quot;约定大于配置&quot;，好的工程化目录(约定)能够很好的提升项目的可维护性。</p><h4 id="作者推荐" tabindex="-1">作者推荐 <a class="header-anchor" href="#作者推荐" aria-label="Permalink to &quot;作者推荐&quot;">​</a></h4><p>在官方的issues中，我们可以找到一些提示：<a href="https://github.com/nestjs/nest/issues/2249" target="_blank" rel="noreferrer">Best scalable project structure</a>这里有作者的回复。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> src</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> core</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> common</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> middleware</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> interceptors</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> guards</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> user</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">interceptors</span><span style="color:#E1E4E8;"> (scoped interceptors)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> user.controller.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> user.model.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> store</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> store.controller.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> store.model.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> src</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> core</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> common</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> middleware</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> interceptors</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> guards</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> user</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interceptors</span><span style="color:#24292E;"> (scoped interceptors)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> user.controller.ts</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> user.model.ts</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> store</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> store.controller.ts</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> store.model.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>可以使用monorepo的方法一一在一个repo中创建两个项目，并在他们之间共享共同的东西，如库/包。</li><li>没有模块目录，按照功能进行划分。</li><li>把通用/核心的东西归为单独的目录：common，比如：拦截器/守卫/管道</li></ul><h4 id="参考项目" tabindex="-1">参考项目 <a class="header-anchor" href="#参考项目" aria-label="Permalink to &quot;参考项目&quot;">​</a></h4><ol><li><a href="https://github.com/kentloog/nestjs-sequelize-typescript" target="_blank" rel="noreferrer">nestjs-sequelize-typescript</a></li></ol><p>技术栈：Nest + sequelize-typescript + JWT + jest + Swagger</p><p>特点：</p><ul><li>项目文档及相关的资源在根目录</li><li>数据库及项目配置会放在根目录</li><li>src中会对功能进行划分，建不同的文件夹users、posts</li><li>单个功能文件夹中，会包括一个完整的CURD的相关文件(dto/controller/module/providers/service)</li><li>抽离公共配置到shared文件夹</li></ul><ol start="2"><li><a href="https://github.com/surmon-china/nodepress" target="_blank" rel="noreferrer">nodepress</a></li></ol><p>特点：</p><ul><li>项目文档及相关的资源在根目录</li><li>src中modules会对功能进行划分建不同的文件夹</li><li>单个功能文件夹中，会包括一个完整的CURD的相关文件(dto/controller/module/providers/service)</li><li>把公共的代码(按照nestjs逻辑分层)拆成单独的文件夹guards、filters、decorators、interceptors、interfaces、errors</li></ul><ol start="3"><li><a href="https://github.com/CatsMiaow/nestjs-project-structure" target="_blank" rel="noreferrer">nestjs-project-structure</a></li></ol><p>特点：</p><ul><li>项目文档及相关的资源在根目录，包括typings、test、bin</li><li>src中会对功能进行划分建不同的文件夹</li><li>抽离公共代码到common文件夹，配置文件放在config文件件，实体类放置在entity中</li><li>鉴权相关的逻辑放在auth</li><li>把同类的guards、filters、decorators、interceptors、interfaces、errors存放在common文件夹中</li></ul><h2 id="核心部分" tabindex="-1">核心部分 <a class="header-anchor" href="#核心部分" aria-label="Permalink to &quot;核心部分&quot;">​</a></h2><p>通过后端框架核心部分主要包括开发层面、功能层面、接口安全层面思考要做哪些内容。</p><p>例如从开发层面我们要考虑多环境配置，功能层面考虑通用模块：用户、菜单、权限、日志，最后是接口文档、接口请求安全&amp;性能等。</p><h3 id="多环境配置" tabindex="-1">多环境配置 <a class="header-anchor" href="#多环境配置" aria-label="Permalink to &quot;多环境配置&quot;">​</a></h3><p>在行业内应用广泛使用的<a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="noreferrer">dotenv</a>和<a href="https://www.npmjs.com/package/config" target="_blank" rel="noreferrer">config</a>。</p><p>官方提供了@nestjs/config模块：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@nestjs/config</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@nestjs/config</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后配置src/app.module.ts</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Module } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { UserModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./user/user.module&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ConfigModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/config&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConfigModule.</span><span style="color:#B392F0;">forRoot</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      isGlobal: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserModule,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  controllers: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Module } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { UserModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./user/user.module&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ConfigModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/config&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  imports: [</span></span>
<span class="line"><span style="color:#24292E;">    ConfigModule.</span><span style="color:#6F42C1;">forRoot</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      isGlobal: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">    UserModule,</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  controllers: [],</span></span>
<span class="line"><span style="color:#24292E;">  providers: [],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppModule</span><span style="color:#24292E;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>然后在项目根目录下创建.env文件，编写环境配置。然后在Controller中进行使用。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Controller, Get } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { UserService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./user.service&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ConfigService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/config&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">userService</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">configService</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigService</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">Get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.configService.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;DB&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(db);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.userService.</span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Controller, Get } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { UserService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./user.service&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ConfigService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/config&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">userService</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">configService</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigService</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  ) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">Get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">db</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.configService.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;DB&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(db);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.userService.</span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>如果我们想使用yaml配置的话，安装js-yaml和@types/js-yaml。</p><h3 id="配置验证" tabindex="-1">配置验证 <a class="header-anchor" href="#配置验证" aria-label="Permalink to &quot;配置验证&quot;">​</a></h3><p>配置验证，主要是指在应用程序启动时，如果没有提供所需的环境变量或不符合某些验证规则，就会抛出一个异常。<code>@nestjs/config</code>包实现了两种不同的方式来实现这一点。</p><ul><li>Joi内置验证器。通过Joi，你可以定义一个对象模式，并根据它验证JavaScript对象</li><li>一个自定义的validate()函数，它将环境变量作为输入</li></ul><h4 id="joi用法" tabindex="-1">Joi用法 <a class="header-anchor" href="#joi用法" aria-label="Permalink to &quot;Joi用法&quot;">​</a></h4><p>最新版本的joi需要你运行Node v12或更高版本，旧版本的node请安装v16.1.8.这主要是因为在v17.0.2发布后，在构建的时候会出现错误。joi最好配合官方的@nestjs/config进行使用。</p><p>安装依赖</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">joi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span><span style="color:#24292E;"> </span><span style="color:#032F62;">joi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>定义验证schema</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Module } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { UserModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./user/user.module&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ConfigModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/config&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> configuration </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./configuration&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> joi </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;joi&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// const envFilePath = \`.env.\${p<wbr>rocess.env.NODE_ENV || &#39;development&#39;}\`;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConfigModule.</span><span style="color:#B392F0;">forRoot</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      isGlobal: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//envFilePath,</span></span>
<span class="line"><span style="color:#E1E4E8;">      load: [configuration],</span></span>
<span class="line"><span style="color:#E1E4E8;">      validationSchema:joi.</span><span style="color:#B392F0;">object</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        DB_PORT: joi.number.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3306</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserModule,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  controllers: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Module } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { UserModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./user/user.module&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ConfigModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/config&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> configuration </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./configuration&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> joi </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;joi&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// const envFilePath = \`.env.\${p<wbr>rocess.env.NODE_ENV || &#39;development&#39;}\`;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  imports: [</span></span>
<span class="line"><span style="color:#24292E;">    ConfigModule.</span><span style="color:#6F42C1;">forRoot</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      isGlobal: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//envFilePath,</span></span>
<span class="line"><span style="color:#24292E;">      load: [configuration],</span></span>
<span class="line"><span style="color:#24292E;">      validationSchema:joi.</span><span style="color:#6F42C1;">object</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        DB_PORT: joi.number.</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3306</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">    UserModule,</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  controllers: [],</span></span>
<span class="line"><span style="color:#24292E;">  providers: [],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppModule</span><span style="color:#24292E;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="orm" tabindex="-1">ORM <a class="header-anchor" href="#orm" aria-label="Permalink to &quot;ORM&quot;">​</a></h3><p>ORM(Object Relational Mapping)对象关系映射，其主要作用是在编程中，把面向对象的概念跟数据库中的概念对应起来。</p><p>例如：定义一个对象，那就对应着一张表，这个对象的实例，就对应着表中的一条记录。</p><p>ORM特点：</p><ul><li>方便维护：数据模型定义在同一个地方，利于重构</li><li>代码量少、对接多种库：代码逻辑更易懂</li><li>工具多，自动化能力强：数据库删除关联数据、事务操作等</li></ul><p>在nestjs中官方提供了一个非常好用的ORM模块叫TypeORM。具体的可以查看官方文档<a href="https://typeorm.io/" target="_blank" rel="noreferrer">https://typeorm.io/</a>，中文文档地址为<a href="https://typeorm.bootcss.com/" target="_blank" rel="noreferrer">https://typeorm.bootcss.com/</a>。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@nestjs/typeorm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typeorm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysql2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@nestjs/typeorm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typeorm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装过程完成后，我们可以将其导入TypeOrmModule到根目录中AppModule</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Module } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { TypeOrmModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/typeorm&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    TypeOrmModule.</span><span style="color:#B392F0;">forRoot</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      type: </span><span style="color:#9ECBFF;">&#39;mysql&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      host: </span><span style="color:#9ECBFF;">&#39;localhost&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      port: </span><span style="color:#79B8FF;">3306</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      username: </span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      password: </span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      database: </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      entities: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">      synchronize: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Module } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { TypeOrmModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/typeorm&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  imports: [</span></span>
<span class="line"><span style="color:#24292E;">    TypeOrmModule.</span><span style="color:#6F42C1;">forRoot</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      type: </span><span style="color:#032F62;">&#39;mysql&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      host: </span><span style="color:#032F62;">&#39;localhost&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      port: </span><span style="color:#005CC5;">3306</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      username: </span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      password: </span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      database: </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      entities: [],</span></span>
<span class="line"><span style="color:#24292E;">      synchronize: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppModule</span><span style="color:#24292E;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h2><p>日志等级主要分为以下几种：</p><ul><li>Log：通用日志，按需进行记录(打印)</li><li>Warning：警告日志，比如：尝试多次进行数据库操作</li><li>Error：严重日志，比如：数据库异常</li><li>Debug：调试日志，比如：加载数据日志</li><li>Verbose：详细日志，所有的操作与详细信息(非必要不打印)</li></ul><p>按照功能分为以下几类：</p><ul><li>错误日志：方便定位问题，给用户友好的提示</li><li>调试日志：方便开发</li><li>请求日志：记录敏感行为</li></ul><p>日志记录位置：</p><ul><li>控制台日志：在开发时方便查看</li><li>文件日志：方便回溯与追踪(24小时滚动)</li><li>数据库日志：敏感操作、敏感数据记录</li></ul>`,95),c=[t];function i(E,y,u,d,b,m){return n(),a("div",null,c)}const g=s(r,[["render",i]]);export{F as __pageData,g as default};
